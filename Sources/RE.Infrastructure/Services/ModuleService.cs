using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using RE.Core.Configuration;
using RE.Core.Interfaces;
using RE.Core.Interfaces.Services;
using RE.Core.Models.Scrapper;

namespace RE.Infrastructure.Services
{
    public class ModuleService : IModuleService
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly IApplicationDbContext _dbContext;
        private readonly Settings _settings;

        public ModuleService(IServiceProvider serviceProvider, IApplicationDbContext dbContext, Settings settings)
        {
            _serviceProvider = serviceProvider;
            _dbContext = dbContext;
            _settings = settings;
        }

        public async IAsyncEnumerable<ScrapperModule> GetScrappingTypeModules([EnumeratorCancellation] CancellationToken cancellationToken)
        {
            var scrapperAssemblies = Directory.EnumerateFiles(_settings.ScrapperDirectory)
                .Select(f => new FileInfo(f))
                .Where(f => f.Extension.Equals(".dll"))
                .Where(IsAssemblyAvailable)
                .Select(f => Assembly.LoadFile(f.FullName));
            foreach (var scrapperAssembly in scrapperAssemblies)
            {
                var moduleTypes = scrapperAssembly.GetExportedTypes().Where(x => typeof(ScrapperModule).IsAssignableFrom(x));
                foreach (var moduleType in moduleTypes)
                {
                    var website = await _dbContext.Websites.AsQueryable().SingleAsync(w => w.Scrapper == moduleType.AssemblyQualifiedName, cancellationToken);
                    yield return (ScrapperModule)ActivatorUtilities.CreateInstance(_serviceProvider, moduleType, website.Url);
                }
            }
        }

        private bool IsAssemblyAvailable(FileInfo assemblyFile)
        {
            try
            {
                Assembly.LoadFile(assemblyFile.FullName);
                return true;
            }
            catch { return false; }
        }
    }
}
