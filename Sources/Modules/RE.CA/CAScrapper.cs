using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Flurl;
using HtmlAgilityPack;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;
using RE.Core.Configuration;
using RE.Core.Extensions;
using RE.Core.Interfaces.Services;
using RE.Core.Models.Scrapper;
using RE.Domain.Enums;

/*
 * https://www.casa-alba.ro/listare-proprietati
 * Properties endpoint: https://www.casa-alba.ro/php/rebs/properties.php
 * Property endpoint: https://www.casa-alba.ro/php/rebs/property-details.php
 */

namespace RE.CA
{
    public class CAScrapper : ScrapperModule
    {
        private readonly Settings _settings;
        private readonly string _baseDomain;
        private readonly string _propertyDetailsEndpoint = "/detalii-proprietate";
        private readonly string _propertiesEndpoint = "/php/rebs/properties.php";
        private readonly string _propertyEndpoint = "/php/rebs/property-details.php";

        public CAScrapper(IServiceProvider serviceProvider, Settings settings, ILogger<ScrapperModule> logger, string baseUrl)
            : base(serviceProvider, baseUrl, logger)
        {
            _settings = settings;
            _baseDomain = $"{new Uri(BaseUrl).Scheme}://{new Uri(BaseUrl).Host}";
        }

        protected override QueryParameter GetSearchQueryParameter()
        {
            return new()
            {
                ["transaction_type"] = "for_sale",
                ["property_type"] = "1",
                ["order_by"] = "date_modified",
                ["order"] = "DESC",
                ["limit"] = "15",
                ["offset"] = "0"
            };
        }

        protected override List<Uri> GetOffersUris(QueryParameter queryParameter)
        {
            var offers = new List<string>();
            var pageOffset = 0;
            var webSession = ServiceProvider.GetRequiredService<IWebSession>();

            while (offers.Count < _settings.OfferCount)
            {
                queryParameter["offset"] = pageOffset.ToString();
                pageOffset += 15;

                var pageUrl = $"{Url.Combine(_baseDomain, _propertiesEndpoint)}{queryParameter}";
                var doc = webSession.Load(pageUrl, RequestType.Get);

                var resultJson = doc.DocumentNode.InnerHtml.ParseJson();
                var properties = resultJson["objects"];
                var propertiyIds = properties.Select(x => x["id"].Value<string>()).ToList();

                var offerUrls = propertiyIds.Select(id => 
                    Url.Combine(_baseDomain, _propertyEndpoint).SetQueryParam("id", id).ToString()).ToList();
                var pristineUrls = offerUrls.Distinct().Where(u => offers.All(o => o != u)).ToList();

                offers.AddRange(pristineUrls);
            }

            return offers.Take(_settings.OfferCount).Select(o => new Uri(o)).ToList();
        }

        protected override Uri RetrieveUrl(Uri offerUri)
        {
            var offerUid = RetrieveSku(offerUri);
            var offerUrl = Url.Combine(_baseDomain, _propertyDetailsEndpoint).SetQueryParam("id", offerUid);
            return new Uri(offerUrl.ToString());
        }

        protected override string RetrieveSku(Uri offerUri)
        {
            return offerUri.AbsoluteUri.Substring(offerUri.AbsoluteUri.LastIndexOf("=") + 1);
        }

        protected override DateTimeOffset? RetrievePublishDate(HtmlDocument doc)
        {
            var jsonData = doc.DocumentNode.InnerHtml.ParseJson();
            var rawTimeStamp = jsonData["date_added"].Value<string>();
            var timeStamp = DateTimeOffset.ParseExact(rawTimeStamp, "yyyy-MM-dd HH:mm:ss", new CultureInfo("ro-RO"));
            return timeStamp;
        }

        protected override string RetrieveTitle(HtmlDocument doc)
        {
            var jsonData = doc.DocumentNode.InnerHtml.ParseJson();
            var title = jsonData["title"].Value<string>();
            return title.Trim();
        }

        protected override decimal RetrievePrice(HtmlDocument doc)
        {
            var jsonData = doc.DocumentNode.InnerHtml.ParseJson();
            var priceText = jsonData["price_sale"].Value<string>();
            return decimal.Parse(priceText);
        }

        protected override short RetrieveRooms(HtmlDocument doc)
        {
            var jsonData = doc.DocumentNode.InnerHtml.ParseJson();
            var rawRoomsNo = jsonData["rooms"].Value<string>();
            return short.Parse(rawRoomsNo);
        }

        protected override short? RetrieveFloor(HtmlDocument doc)
        {
            var jsonData = doc.DocumentNode.InnerHtml.ParseJson();
            var floorText = jsonData["verbose_floor"].Value<string>();

            if (floorText.IndexOf("/") > -1)
                floorText = floorText.Remove(floorText.IndexOf("/")).Trim();
            if (floorText.IndexOf("+") > -1)
                floorText = floorText.Remove(floorText.IndexOf("+")).Trim();
            var specialFloors = new List<string> { "Penthouse", "Mansarda" };

            return floorText switch
            {
                var f when specialFloors.Contains(f) => (short?)null,
                "Parter" => 0,
                "Demisol" => -1,
                _ => floorText.Convert<short?>()
            };
        }

        protected override string RetrieveYear(HtmlDocument doc)
        {
            var jsonData = doc.DocumentNode.InnerHtml.ParseJson();
            var yearText = jsonData["building_construction_year"].Value<string>();
            return yearText;
        }

        protected override string RetrievePartitioning(HtmlDocument doc)
        {
            var jsonData = doc.DocumentNode.InnerHtml.ParseJson();
            var descriptionText = jsonData["description"].Value<string>().ToLowerInvariant();
            
            if (descriptionText.Contains("nedecomandat"))
                return "Nedecomandat";

            if (descriptionText.Contains("semidecomandat") || descriptionText.Contains("semi-decomandat"))
                return "Semidecomandat";

            if (descriptionText.Contains("decomandat"))
                return "Decomandat";

            if (descriptionText.Contains("comandat"))
                return "Comandat";

            if (descriptionText.Contains("garsoniera"))
                return "Garsoniera";

            if (descriptionText.Contains("open space") || descriptionText.Contains("open-space"))
                return "Open space";
            
            if (descriptionText.Contains("camera camin") || descriptionText.Contains("camera de camin"))
                return "Camera Camin";

            if (descriptionText.Contains("vagon"))
                return "Vagon";

            return default;
        }

        protected override int? RetrieveUsableArea(HtmlDocument doc)
        {
            var jsonData = doc.DocumentNode.InnerHtml.ParseJson();
            var usableAreaText = jsonData["surface_useable"].Value<string>().ToLowerInvariant();
            var usableArea = double.Parse(usableAreaText);
            return Convert.ToInt32(usableArea);
        }

        protected override int? RetrieveTotalArea(HtmlDocument doc)
        {
            var jsonData = doc.DocumentNode.InnerHtml.ParseJson();
            var totalAreaElem = jsonData["surface_yard"];
            var totalAreaText = totalAreaElem.Value<string>()?.ToLowerInvariant();
            if (totalAreaText is not null)
            {
                var totalArea = double.Parse(totalAreaText);
                return totalAreaText.Convert<int?>();
            }

            return default;
        }
    }
}