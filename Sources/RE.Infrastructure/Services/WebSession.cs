using System;
using System.Collections.Concurrent;
using System.Linq;
using System.Net;
using System.Text;
using System.Web;
using HtmlAgilityPack;
using Microsoft.Extensions.Logging;
using RE.Core.Builders;
using RE.Core.Extensions;
using RE.Core.Interfaces.Services;
using RE.Core.Models;
using RE.Domain.Enums;

namespace RE.Infrastructure.Services
{
    public class WebSession : IWebSession
    {
        private readonly ILogger<WebSession> _logger;

        public WebSession(ILogger<WebSession> logger)
        {
            _logger = logger;
        }

        public ConcurrentBag<Cookie> Cookies { get; private set; }

        public FormCollection Forms { get; private set; }

        public HttpStatusCode StatusCode { get; private set; }

        public HtmlDocument Load(string baseUrl, RequestType type, HtmlNode form = null)
        {
            return new RetryPolicyActionBuilder()
                .WithExceptionMessage(_logger, $"Web session load exception - Url: {baseUrl}, Request Type: {type}")
                .BuildAndExecute(() =>
                {
                    var web = CreateWebRequestObject(type, form);
                    baseUrl = new Uri(baseUrl).GetAbsoluteUrl(form?.Attributes["action"].Value);
                    var document = web.Load(baseUrl, type.ToString());
                    StatusCode = web.StatusCode;

                    return document;
                });
        }

        private HtmlWeb CreateWebRequestObject(RequestType type, HtmlNode form)
        { 
            return new HtmlWeb
            {
               UseCookies = true,
               PreRequest = request => OnPreRequest(request, type, form),
               PostResponse = OnAfterResponse,
               PreHandleDocument = OnPreHandleDocument
            };
        }

        private bool OnPreRequest(HttpWebRequest request, RequestType type, HtmlNode form)
        {
            request.AllowAutoRedirect = false;

            // Add Cookies
            if (Cookies is not null && Cookies.Count > 0)
            {
                foreach (var cookie in Cookies)
                    request.CookieContainer?.Add(cookie);
            }

            // Add Post Data
            if (type == RequestType.Post)
            {
                var payload = ComputePayloadRequest(form);
                var buff = Encoding.UTF8.GetBytes(payload.ToCharArray());
                request.ContentLength = buff.Length;
                request.ContentType = "application/x-www-form-urlencoded";
                var reqStream = request.GetRequestStream();
                reqStream.Write(buff, 0, buff.Length);
            }

            return true;
        }

        private void OnAfterResponse(HttpWebRequest request, HttpWebResponse response)
        {
            if (response.Cookies.Any())
            {
                Cookies ??= new ConcurrentBag<Cookie>();
                foreach (Cookie cookie in response.Cookies)
                    Cookies.Add(cookie);
            }
        }

        private void OnPreHandleDocument(HtmlDocument document)
        {
            Forms = new FormCollection(document);
        }

        private string ComputePayloadRequest(HtmlNode form = null)
        {
            var payload = new StringBuilder();
            if (form is not null)
            {
                payload = ComputePayload(form);
            }
            else
            {
                foreach (var f in Forms)
                {
                    payload.Append(ComputePayload(f.Key));
                }
            }

            return payload.ToString().Substring(1);
        }

        private StringBuilder ComputePayload(HtmlNode form)
        {
            var sb = new StringBuilder();
            foreach (var dictionaryElement in Forms[form])
            {
                var value = HttpUtility.UrlEncode(dictionaryElement.Value);
                sb.Append($"&{dictionaryElement.Key}={value}");
            }

            return sb;
        }
    }
}
