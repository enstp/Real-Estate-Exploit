using System.Threading;
using System.Threading.Tasks;
using MediatR;
using RE.Core.Business.Commands.Requests.Alerts;
using RE.Core.Exceptions;
using RE.Core.Interfaces.Repository;
using RE.Domain.Entities;

namespace RE.Core.Business.Commands.Handlers.Alerts
{
    public class DeleteAlertCommandHandler : IRequestHandler<DeleteAlertCommand>
    {
        private readonly IAlertRepository _alertRepo;

        public DeleteAlertCommandHandler(IAlertRepository alertRepo)
        {
            _alertRepo = alertRepo;
        }

        public async Task<Unit> Handle(DeleteAlertCommand request, CancellationToken cancellationToken)
        {
            var entity = await _alertRepo.Get(request.Id, cancellationToken);
            if (entity is null)
            {
                throw new NotFoundException(nameof(Alert), request.Id);
            }

            await _alertRepo.Delete(entity, cancellationToken);

            return Unit.Value;
        }
    }
}