using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using MediatR;
using Microsoft.EntityFrameworkCore;
using RE.Core.Business.Commands.Requests.Emails;
using RE.Core.Business.Queries.Requests.Offers;
using RE.Core.Business.Queries.Responses.Offers;
using RE.Core.Extensions;
using RE.Core.Interfaces.Repository;
using RE.Core.Interfaces.Services;
using RE.Core.Models.Filters;
using RE.Domain.Entities;

namespace RE.Core.Business.Commands.Handlers.Emails
{
    public class SendFreshOffersEmailCommandHandler : IRequestHandler<SendFreshOffersEmailCommand>
    {
        private readonly IAlertRepository _alertRepo;
        private readonly IOfferFilter _offerFilter;
        private readonly Configuration.Settings _settings;
        private readonly IMediator _mediator;
        private readonly IMapper _mapper;

        public SendFreshOffersEmailCommandHandler(
            IAlertRepository alertRepo,
            IOfferFilter offerFilter,
            Configuration.Settings settings,
            IMediator mediator,
            IMapper mapper)
        {
            _alertRepo = alertRepo;
            _offerFilter = offerFilter;
            _settings = settings;
            _mediator = mediator;
            _mapper = mapper;
        }

        public async Task<Unit> Handle(SendFreshOffersEmailCommand request, CancellationToken cancellationToken)
        {
            var offerCollection = await _mediator.Send(new GetSpecificOffersQuery { Ids = request.Ids }, cancellationToken);
            var offers = await offerCollection.ToListAsync(cancellationToken);
            var alerts = await _alertRepo.Query().ToListAsync(cancellationToken);

            foreach (var alert in alerts)
            {
                var filteredOffers = Filter(offers, alert);
                await Notify(filteredOffers, alert, cancellationToken);
            }

            return Unit.Value;
        }

        private IList<OfferDto> Filter(List<OfferDto> offers, Alert alert)
        {
            return _offerFilter
                .FilterBy(offers, alert.Rooms, 
                    o => o.Rooms < 4 ? (RoomsFilter)o.Rooms : RoomsFilter.FourOrMore)
                .ThenBy(alert.Floors, 
                    o => o.Floor.HasValue ?  (o.Floor.Value < 10 ? (FloorFilter)o.Floor.Value : FloorFilter.TenOrMore) : FloorFilter.Unspecified)
                .ThenBy(alert.Partitioning, 
                    o => o.Partitioning?.ParseEnum<PartitioningFilter>() ?? PartitioningFilter.Unspecified)
                .Result;
        }

        private async Task Notify(IList<OfferDto> offers, Alert alert, CancellationToken token)
        {
            var newOffers = offers.Where(o => o.Evaluations == 1).ToList();
            var reEvaluatedOffers = offers.Where(o => o.Evaluations > 1).ToList();

            if (alert.IncommingOffers && newOffers.Any())
                await _mediator.Send(new SendNewOffersEmailCommand { NotifiedEmail = alert.Email, Ids = newOffers.Select(o => o.Id).ToList() }, token);
            if (alert.ReevaluatedOffers && reEvaluatedOffers.Any())
                await _mediator.Send(new SendReevaluatedOffersEmailCommand { NotifiedEmail = alert.Email, Ids = reEvaluatedOffers.Select(o => o.Id).ToList() }, token);
        }
    }
}