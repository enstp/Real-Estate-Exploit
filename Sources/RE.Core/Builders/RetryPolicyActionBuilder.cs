using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Polly;
using Polly.Retry;

namespace RE.Core.Builders
{
    public class RetryPolicyActionBuilder
    {
        private int _numberOfRetries = 3;
        private TimeSpan _retryTimout = TimeSpan.FromSeconds(3);
        private Type _exceptionType = typeof(Exception);
        private string _exceptionMessage = null;
        private ILogger _exceptionLogger = null;

        public RetryPolicyActionBuilder WithRetries(int numberOfRetries)
        {
            _numberOfRetries = numberOfRetries;
            return this;
        }

        public RetryPolicyActionBuilder WithRetryTimeout(TimeSpan retryTimeout)
        {
            _retryTimout = retryTimeout;
            return this;
        }

        public RetryPolicyActionBuilder WithExceptionType(Type exceptionType)
        {
            _exceptionType = exceptionType;
            return this;
        }

        public RetryPolicyActionBuilder WithExceptionMessage(ILogger logger, string exceptionMessage)
        {
            _exceptionMessage = exceptionMessage;
            _exceptionLogger = logger;
            return this;
        }

        public async Task<T> BuildAndExecute<T>(Func<Task<T>> action)
        {
            var retryPolicy = BuildAsyncRetryPolicy();

            var policyResult = await retryPolicy.ExecuteAsync(action);

            return policyResult;
        }

        public async Task BuildAndExecute(Func<Task> action)
        {
            var retryPolicy = BuildAsyncRetryPolicy();

            await retryPolicy.ExecuteAsync(action);
        }

        public T BuildAndExecute<T>(Func<T> action)
        {
            var retryPolicy = BuildRetryPolicy();

            var policyResult = retryPolicy.Execute(action);

            return policyResult;
        }

        private AsyncRetryPolicy BuildAsyncRetryPolicy()
        {
            return Policy
                .Handle<Exception>(VerifyException)
                .WaitAndRetryAsync(_numberOfRetries, i => _retryTimout,
                    (exception, i) =>
                    {
                        _exceptionLogger?.LogWarning(exception,
                            $"{_exceptionMessage ?? exception.Message}. Retry attempt: {i}");
                    });
        }

        private Polly.Retry.RetryPolicy BuildRetryPolicy()
        {
            return Policy
                .Handle<Exception>(VerifyException)
                .WaitAndRetry(_numberOfRetries, i => _retryTimout,
                    (exception, i) =>
                    {
                        _exceptionLogger?.LogWarning(exception,
                            $"{_exceptionMessage ?? exception.Message}. Retry attempt: {i}");
                    });
        }

        private bool VerifyException(Exception exception)
        {
            return exception.GetType() == _exceptionType || exception.GetType().IsSubclassOf(_exceptionType);
        }
    }
}
