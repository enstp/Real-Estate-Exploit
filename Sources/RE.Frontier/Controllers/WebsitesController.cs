using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using RE.Core.Business.Commands.Requests.Websites;
using RE.Core.Business.Queries.Requests.Offers;
using RE.Core.Models.Pagination;
using RE.Domain.Constants;
using RE.Frontier.Controllers.Base;
using RE.Frontier.Infrastructure.Filters;

namespace RE.Frontier.Controllers
{
    public class WebsitesController : MvcController
    {
        [Route("[controller]/{id}")]
        [ManualTransactionFilter]
        public async Task<IActionResult> Index(int id, PagingInfo paging, SearchInfo search, SortInfo sort, FilterInfo filter)
        {
            filter.InitializeMultiSelectFilter();
            var pagedOffers = await Mediator.Send(new GetOffersQuery
            {
                WebsiteId = id,
                PagingInfo = paging,
                SearchInfo = search,
                SortInfo = sort,
                FilterInfo = filter
            });
            return View(pagedOffers);
        }

        [Route("[controller]/[action]")]
        [Authorize(Policy = Policies.AuthorizedUser)]
        public async Task<IActionResult> Activate(int id)
        {
            await Mediator.Send(new SetWebsiteActiveCommand { Id = id, Active = true });
            return RedirectToAction("Index", "Settings");
        }

        [Route("[controller]/[action]")]
        [Authorize(Policy = Policies.AuthorizedUser)]
        public async Task<IActionResult> Deactivate(int id)
        {
            await Mediator.Send(new SetWebsiteActiveCommand { Id = id, Active = false });
            return RedirectToAction("Index", "Settings");
        }
    }
}
