using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using FluentDateTime;
using Microsoft.EntityFrameworkCore;
using RE.Core.Business.Base.Handlers;
using RE.Core.Business.Queries.Requests.Reports;
using RE.Core.Business.Queries.Responses.Offers;
using RE.Core.Business.Queries.Responses.Reports;
using RE.Core.Extensions;
using RE.Core.Interfaces.Repository;
using RE.Core.Models.Inclusions;

namespace RE.Core.Business.Queries.Handlers.Reports
{
    public class GetReportsQueryHandler : BaseHandler<GetReportsQuery, ReportsResponse>
    {
        private readonly IOfferRepository _offerRepo;
        private readonly Configuration.Settings _settings;
        private readonly IMapper _mapper;

        public GetReportsQueryHandler(IOfferRepository offerRepo, Configuration.Settings settings, IMapper mapper)
        {
            _offerRepo = offerRepo;
            _settings = settings;
            _mapper = mapper;
        }

        public override async Task<ReportsResponse> HandleRequest(GetReportsQuery request, CancellationToken cancellationToken)
        {
            var inclusions = new OfferInclusions { IncludeWebsite = true, IncludeEvaluations = true, IncludeEvaluationOffers = true };
            var offers = await _offerRepo.Query(inclusions).ToListAsync(cancellationToken);
            var summaries = _mapper.Map<IList<OfferSummary>>(offers);
            var roomOffers = Flatten(summaries.Where(o => o.Offer.Rooms == (short)request.Rooms).ToList());

            return new ReportsResponse
            {
                RoomOffers = roomOffers.ToList(),
                Websites = request.Items,
                AuthorizedAccess = request.AuthorizedAccess
            };
        }

        private IEnumerable<SummaryDto> Flatten(IList<OfferSummary> offers)
        {
            var startDate = offers.Min(o => o.Offer.PublishDate).Date;
            var endDate = DateTime.UtcNow.EndOfDay();

            foreach (var day in DateExtensions.EachDay(startDate, endDate))
            {
                var dayOffers = offers.Where(o => o.Evolution.Select(e => e.Day).Any(d => d.SameDay(day))).ToList();
                var dayOffersCount = dayOffers.Count();
                var dayOffersAverage = dayOffers.Average(o => o.Evolution.First(e => e.Day.SameDay(day)).Price);
                yield return new SummaryDto
                {
                    DateTime = day,
                    Offers = dayOffers.Count(),
                    AveragePrice = dayOffersAverage,
                };
            }
        }
    }
}