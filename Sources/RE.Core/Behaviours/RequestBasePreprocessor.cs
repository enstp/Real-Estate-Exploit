using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using MediatR.Pipeline;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using RE.Core.Business.Queries.Responses.Websites;
using RE.Core.Extensions;
using RE.Core.Interfaces;
using RE.Core.Interfaces.Mediator;

namespace RE.Core.Behaviours
{
    public class RequestBasePreprocessor<TRequest> : IRequestPreProcessor<TRequest>
    {
        private readonly IApplicationDbContext _dbContext;
        private readonly IHttpContextAccessor _contextAccessor;
        private readonly IMapper _mapper;

        public RequestBasePreprocessor(IApplicationDbContext dbContext, IHttpContextAccessor contextAccessor, IMapper mapper)
        {
            _dbContext = dbContext;
            _contextAccessor = contextAccessor;
            _mapper = mapper;
        }

        public async Task Process(TRequest request, CancellationToken cancellationToken)
        {
            if (request is IWebsiteRequest websiteRequest)
            {
                websiteRequest.Items = await _dbContext.Websites.OrderByPriority().ProjectTo<WebsiteDto>(_mapper.ConfigurationProvider).ToListAsync(cancellationToken);
            }
            if (request is IAuthorizedRequest authorizedRequest)
            {
                authorizedRequest.AuthorizedAccess = !_contextAccessor.HttpContext.HasAddressSet();
            }

            await Task.CompletedTask;
        }
    }
}