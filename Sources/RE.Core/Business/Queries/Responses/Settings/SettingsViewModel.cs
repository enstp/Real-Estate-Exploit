using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using RE.Core.Interfaces;

namespace RE.Core.Business.Queries.Responses.Settings
{
    public class SettingsViewModel : BaseResponse, IMapFrom<Configuration.Settings>
    {
        [DisplayName(@"Use ScreenShotMachine for captures (<span class=""text-danger"">requires restart</span>)")]
        public bool UseScreenShotMachineApi { get; set; }

        [DisplayName("ScreenShotMachine Api Key")]
        public string ScreenShotMachineApiKey { get; set; }

        [DisplayName("Offer Limit Count")]
        [Required]
        public int OfferCount { get; set; }

        [DisplayName("Scrapper Modules Directory")]
        [Required]
        public string ScrapperDirectory { get; set; }

        [DisplayName("Take offers screen shots")]
        public bool TakeScreenShots { get; set; }

        [DisplayName("Screen Shots Directory")]
        [Required]
        public string ScreenShotsDirectory { get; set; }

        [DisplayName("Chrome Driver Directory")]
        public string ChromeDriverDirectory { get; set; }

        [DisplayName("Scrapping Time Interval")]
        [Required]
        public string Chrono { get; set; }

        [DisplayName("Timeout Coverage")]
        [Required]
        public int TimeoutCoverage { get; set; }

        public bool JubRunning { get; set; }

        public int MissingCaptures { get; set; }
        
        public void Mapping(AutoMapper.Profile profile)
        {
            profile.CreateMap<Configuration.Settings, SettingsViewModel>()
                .ForMember(d => d.JubRunning, opt => opt.Ignore());
        }
    }
}
