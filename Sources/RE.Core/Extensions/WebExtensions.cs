using System;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using HtmlAgilityPack;
using Jurassic.Library;
using OpenQA.Selenium;

namespace RE.Core.Extensions
{
    public static class WebExtensions
    {
        public static bool ContainsAttribute(this HtmlNode node, string attributeName)
        {
            return node.Attributes[attributeName] is not null;
        }

        public static bool ContainsAttributeWithValue(this HtmlNode node, string attributeName, string value)
        {
            var attribute = node.Attributes[attributeName];
            if (attribute is null)
                return false;
            return attribute.Value.Equals(value, StringComparison.InvariantCultureIgnoreCase);
        }

        public static bool ContainsAttributeStartsWithValue(this HtmlNode node, string attributeName, string value)
        {
            var attribute = node.Attributes[attributeName];
            if (attribute is null)
                return false;
            return attribute.Value.StartsWith(value, StringComparison.InvariantCultureIgnoreCase);
        }

        public static bool ContainsAttributeWithContainsValue(this HtmlNode node, string attributeName, string value)
        {
            var attribute = node.Attributes[attributeName];
            if (attribute is null)
                return false;
            return attribute.Value.ToLowerInvariant().Contains(value.ToLowerInvariant());
        }

        public static string ParseScript(this HtmlNode scriptNode)
        {
            var script = scriptNode.InnerText.Trim();
            var engine = new Jurassic.ScriptEngine();
            var result = engine.Evaluate("(function() { " + script + " return spect; })()");
            return JSONObject.Stringify(engine, result);
        }

        public static bool IsSet(this IPAddress address)
        {
            var nullIpAddress = "::1";
            var locapIpAddress = "127.0.0.1";
            return address is not null
                   && address.ToString() != nullIpAddress
                   && address.ToString() != locapIpAddress
                   && address.AddressFamily != AddressFamily.InterNetwork
                   && address.AddressFamily != AddressFamily.InterNetworkV6;
        }

        public static string GetAbsoluteUrl(this Uri baseUrl, string url)
        {
            var isAbsolutePath = Uri.TryCreate(url, UriKind.Absolute, out var _);
            if (!isAbsolutePath)
            {
                var finalUrl = $"{baseUrl}{url}";
                if (Uri.TryCreate(finalUrl, UriKind.Absolute, out var _))
                {
                    return finalUrl;
                }
            }

            return url;
        }

        public static IWebElement LocateElement(this IWebDriver webDriver, By by)
        {
            return webDriver.FindElements(by).Any() ? webDriver.FindElement(by) : null;
        }

        public static void HideElement(this IWebDriver webDriver, IWebElement element)
        {
            if(element is not null)
                ((IJavaScriptExecutor)webDriver).ExecuteScript("arguments[0].parentNode.removeChild(arguments[0]);", element);
        }
    }
}
