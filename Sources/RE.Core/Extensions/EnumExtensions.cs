using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using RE.Core.Attributes;
using RE.Core.Exceptions;
using RE.Core.Models.Filters;
using RE.Domain.Constants;

namespace RE.Core.Extensions
{
    public static class EnumExtensions
    {
        public static T ParseEnum<T>(this string value)
        {
            return (T)Enum.Parse(typeof(T), value.Trim(), true);
        }

        public static string GetDisplayName<T>(this T enumValue) where T : Enum
        {
            return enumValue.GetType()
                .GetMember(enumValue.ToString())
                .First()
                .GetCustomAttribute<DisplayAttribute>()
                ?.GetName();
        }

        public static string GetDisplayIcon<T>(this T enumValue) where T : Enum
        {
            return enumValue.GetType()
                .GetMember(enumValue.ToString())
                .First()
                .GetCustomAttribute<IconAttribute>()
                ?.Name;
        }

        public static string GetDisplayCssClass<T>(this T enumValue) where T : Enum
        {
            return enumValue.GetType()
                .GetMember(enumValue.ToString())
                .First()
                .GetCustomAttribute<CssClassAttribute>()
                ?.Name;
        }
    }
}
