using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Flurl;
using HtmlAgilityPack;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using RE.Core.Configuration;
using RE.Core.Extensions;
using RE.Core.Interfaces.Services;
using RE.Core.Models.Scrapper;
using RE.Domain.Enums;

/*
 * https://www.onyxrealestate.ro/apartamente-de-vanzare/iasi-8449/1
 */

namespace RE.ORE
{
    public class OREScrapper : ScrapperModule
    {
        private readonly Settings _settings;
        private readonly string _baseDomain;

        public OREScrapper(IServiceProvider serviceProvider, Settings settings, ILogger<ScrapperModule> logger, string baseUrl)
            : base(serviceProvider, baseUrl, logger)
        {
            _settings = settings;
            _baseDomain = $"{new Uri(BaseUrl).Scheme}://{new Uri(BaseUrl).Host}";
        }

        protected override QueryParameter GetSearchQueryParameter()
        {
            return new();
        }

        protected override List<Uri> GetOffersUris(QueryParameter queryParameter)
        {
            var offers = new List<string>();
            var pageNo = 1;
            var webSession = ServiceProvider.GetRequiredService<IWebSession>();
            var pageUrl = $"{BaseUrl}{queryParameter}";
            var doc = webSession.Load(pageUrl, RequestType.Get);

            while (offers.Count < _settings.OfferCount)
            {
                var resultsForm = doc.DocumentNode.Descendants("form").First(x => x.Id == "frm-cautare");
                webSession.Forms[resultsForm]["page1"] = (pageNo++).ToString();
                webSession.Forms[resultsForm]["sortBy"] = "4"; // Descending
                doc = webSession.Load(pageUrl, RequestType.Post, resultsForm);

                var offerContainers = doc.DocumentNode.Descendants("div").Where(x => x.ContainsAttributeWithValue("class", "rle_property_infobox")).ToList();
                var offerLinks = offerContainers.Select(c => c.Descendants("a").First()).ToList();
                var offerUrls = offerLinks.Select(l => l.Attributes["href"].Value).ToList();
                var pristineUrls = offerUrls.Where(u => offers.All(o => o != u));
                pristineUrls = pristineUrls.Distinct().Select(u => Url.Combine(_baseDomain, u));

                offers.AddRange(pristineUrls);
            }

            return offers.Take(_settings.OfferCount).Select(o => new Uri(o)).ToList();
        }

        protected override string RetrieveSku(Uri offerUri)
        {
            return offerUri.AbsoluteUri.Substring(offerUri.AbsoluteUri.LastIndexOf("-") + 1).Replace(".html", string.Empty);
        }

        protected override DateTimeOffset? RetrievePublishDate(HtmlDocument doc)
        {
            var headingContainer = doc.DocumentNode.Descendants("div").First(x => x.ContainsAttributeWithValue("class", "rle_property_single_heading"));
            var detailsLabel = headingContainer.Descendants().Last();
            var details = detailsLabel.InnerText.Trim();
            var rawTimeStamp = details.Substring(details.LastIndexOf(" ") + 1);
            var timeStamp = DateTimeOffset.ParseExact(rawTimeStamp, "d.M.yyyy", new CultureInfo("ro-RO"));
            return timeStamp;
        }

        protected override string RetrieveTitle(HtmlDocument doc)
        {
            var titleContainer = doc.DocumentNode.Descendants("div").First(x => x.ContainsAttributeWithValue("class", "rle_property_single_heading"));
            var titleElem = doc.DocumentNode.Descendants("h1").First();
            var title = titleElem.InnerText.Trim();
            return title;
        }

        protected override decimal RetrievePrice(HtmlDocument doc)
        {
            var detailsForm = doc.DocumentNode.Descendants("form").First(x => x.Id == "frm-contact-detalii");
            var priceInput = detailsForm.Descendants("input").First(x => x.ContainsAttributeWithValue("name", "txtPret"));
            var priceText = priceInput.Attributes["value"].Value;
            return decimal.Parse(priceText);
        }

        protected override short RetrieveRooms(HtmlDocument doc)
        {
            var detailsElems = doc.DocumentNode.Descendants("ul")
                .First(x => x.ContainsAttributeWithContainsValue("class", "feature_prop"))
                .Descendants("li").Select(x => x.Descendants().Last());
            var roomsElem = detailsElems.First(x => x.InnerText.Contains("Numar Camere:"));
            var rawRoomsNo = roomsElem.InnerText.Substring(roomsElem.InnerText.LastIndexOf(" ") + 1);
            return short.Parse(rawRoomsNo);
        }

        protected override short? RetrieveFloor(HtmlDocument doc)
        {
            var detailsElems = doc.DocumentNode.Descendants("ul")
                .First(x => x.ContainsAttributeWithContainsValue("class", "feature_prop"))
                .Descendants("li").Select(x => x.Descendants().Last());
            var floorElem = detailsElems.First(x => x.InnerText.Contains("Etaj:"));
            var floorText = floorElem.InnerText.Substring(floorElem.InnerText.LastIndexOf(" ") + 1);
            floorText = floorText.Remove(floorText.LastIndexOf("/"));
            return floorText switch
            {
                "parter" => 0,
                _ => floorText.Convert<short?>()
            };
        }

        protected override string RetrieveYear(HtmlDocument doc)
        {
            var detailsElems = doc.DocumentNode.Descendants("ul")
                .First(x => x.ContainsAttributeWithContainsValue("class", "feature_prop"))
                .Descendants("li").Select(x => x.Descendants().Last());
            var yearElem = detailsElems.First(x => x.InnerText.Contains("An Constructie:"));
            var yearText = yearElem.InnerText.Substring(yearElem.InnerText.LastIndexOf(" ") + 1);
            return yearText;
        }

        protected override string RetrievePartitioning(HtmlDocument doc)
        {
            var detailsElems = doc.DocumentNode.Descendants("ul")
                .First(x => x.ContainsAttributeWithContainsValue("class", "feature_prop"))
                .Descendants("li").Select(x => x.Descendants().Last());
            var partitionElem = detailsElems.First(x => x.InnerText.Contains("Compartimentare:"));
            var partitionText = partitionElem.InnerText.Substring(partitionElem.InnerText.LastIndexOf(" ") + 1);
            return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(partitionText);
        }

        protected override int? RetrieveUsableArea(HtmlDocument doc)
        {
            var detailsElems = doc.DocumentNode.Descendants("ul")
                .First(x => x.ContainsAttributeWithContainsValue("class", "feature_prop"))
                .Descendants("li").Select(x => x.Descendants().Last());
            var usableAreaElem = detailsElems.First(x => x.InnerText.Contains("Suprafata utila:"));
            var usableAreaText = usableAreaElem.InnerText.Replace("mp", string.Empty).Trim();
            usableAreaText = usableAreaText.Substring(usableAreaText.LastIndexOf(" ") + 1);
            var usableArea = double.Parse(usableAreaText);
            return Convert.ToInt32(usableArea);
        }

        protected override int? RetrieveTotalArea(HtmlDocument doc)
        {
            return default;
        }
    }
}