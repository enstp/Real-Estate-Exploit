using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore.Query;
using RE.Core.Models.Pagination;
using RE.Domain.Constants;

namespace RE.Core.Extensions
{
    public static class CollectionsExtensions
    {
        public static IEnumerable<List<T>> SplitList<T>(this List<T> locations, int nSize = 30)
        {
            for (var i = 0; i < locations.Count; i += nSize)
            {
                yield return locations.GetRange(i, Math.Min(nSize, locations.Count - i));
            }
        }

        public static T Next<T>(this IList<T> collection, T current)
        {
            return collection.SkipWhile(x => !x.Equals(current)).Skip(1).FirstOrDefault();
        }

        public static T Previous<T>(this IList<T> collection, T current)
        {
            return collection.TakeWhile(x => !x.Equals(current)).LastOrDefault();
        }

        public static IQueryable<T> Paged<T>(this IQueryable<T> query, PagingInfo info)
        {
            return query.Skip((info.CurrentPage - 1) * info.PageSize).Take(info.PageSize);
        }

        public static IQueryable<T> If<T>(this IQueryable<T> source, bool condition, Func<IQueryable<T>, IQueryable<T>> transform)
        {
            return condition ? transform(source) : source;
        }

        public static IQueryable<T> If<T, P>(this IIncludableQueryable<T, P> source,
            bool condition,
            Func<IIncludableQueryable<T, P>, IQueryable<T>> transform) where T : class
        {
            return condition ? transform(source) : source;
        }

        public static string JoinBy<T>(this IEnumerable<T> collection, string delimiter)
        {
            return string.Join(delimiter, collection);
        }
    }
}
