using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using RE.Core.Interfaces.Services;

namespace RE.Frontier.Infrastructure.Requirements
{
    public class AuthorizationHandler : AuthorizationHandler<AuthorizationRequirement>
    {
        private readonly IAuthService _authService;
        private readonly IHttpContextAccessor _contextAccessor;

        public AuthorizationHandler(IAuthService authService, IHttpContextAccessor contextAccessor)
        {
            _authService = authService;
            _contextAccessor = contextAccessor;
        }

        protected override async Task HandleRequirementAsync(AuthorizationHandlerContext context, AuthorizationRequirement requirement)
        {
            if (_authService.IsAuthorized)
                context.Succeed(requirement);
            else if (_contextAccessor.HttpContext is not null)
                await _contextAccessor.HttpContext.Response.WriteAsync("Restricted access");
        }
    }
}