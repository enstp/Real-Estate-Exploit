using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Flurl;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using RE.Core.Configuration;

namespace RE.Infrastructure.HttpClients
{
    public class WebShotClient
    {
        private readonly HttpClient _client;
        private readonly IServiceProvider _serviceProvider;
        private readonly ScreenShotMachineSettings _screenShotMachineSettings;

        public WebShotClient(HttpClient client, IServiceProvider serviceProvider, IOptions<ScreenShotMachineSettings> screenShotMachineSettings)
        {
            _client = client;
            _serviceProvider = serviceProvider;
            _screenShotMachineSettings = screenShotMachineSettings.Value;
        }

        public async Task<byte[]> TakeSnapShot(Uri url, CancellationToken cancellationToken = default)
        {
            var olxConsentScreen = "#onetrust-consent-sdk";
            var interImobiliareChat = "#fb-root";
            var expertCasaConsentScreen = ".alert-cookies-backdrop";
            var casaAlbaConsentScreen = ".cookies-consent";

            var options = new Dictionary<string, string>
            {
                { "url", url.ToString() },

                // Full length screenshot
                { "dimension", "1024xfull" }, 

                // Always fresh screenshot
                { "cacheLimit", "0" },          

                // OLX and InterImobiliare chat 
                { "hide", string.Join(",", new []{ olxConsentScreen, interImobiliareChat, expertCasaConsentScreen, casaAlbaConsentScreen }) },
            };

            var apiUrl = GenerateScreenshotApiUrl(options);
            using var response = await _client.GetAsync(apiUrl, cancellationToken);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadAsByteArrayAsync(cancellationToken);
        }

        private string GenerateScreenshotApiUrl(Dictionary<string, string> options)
        {
            var baseApiUrl = Url.Combine(_screenShotMachineSettings.Endpoint.ToString(), "?");
            return GenerateUrl(baseApiUrl, options);
        }

        private string GeneratePdfApiUrl(Dictionary<string, string> options)
        {
            var basePdfApiUrl = Url.Combine(_screenShotMachineSettings.PdfEndpoint.ToString(), "?");
            return GenerateUrl(basePdfApiUrl, options);
        }

        private string GenerateUrl(string baseUrl, Dictionary<string, string> options)
        {
            var configuration = _serviceProvider.GetRequiredService<IConfigurationRoot>();
            var apiKey = configuration.GetValue<string>(nameof(Settings.ScreenShotMachineApiKey));
            var apiUrl = new StringBuilder(baseUrl);
            apiUrl.Append("key=").Append(apiKey);
            if (!string.IsNullOrEmpty(_screenShotMachineSettings.SecretPhrase) &&
                !string.IsNullOrWhiteSpace(_screenShotMachineSettings.SecretPhrase))
            {
                apiUrl.Append("&hash=").Append(CalculateHash(options["url"] + _screenShotMachineSettings.SecretPhrase));
            }

            foreach (var pair in options)
            {
                var key = pair.Key;
                var value = pair.Value;
                apiUrl.Append("&").Append(key).Append("=").Append(WebUtility.UrlEncode(value));
            }

            return apiUrl.ToString();
        }

        private string CalculateHash(string text)
        {
            var md5 = MD5.Create();
            var bytes = Encoding.UTF8.GetBytes(text);
            var hash = md5.ComputeHash(bytes);
            var sb = new StringBuilder();
            foreach (var c in hash)
            {
                sb.Append(c.ToString("X2"));
            }

            return sb.ToString();
        }
    }
}
