using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using MediatR;
using RE.Core.Business.Queries.Requests.Alerts;
using RE.Core.Business.Queries.Responses.Alerts;
using RE.Core.Interfaces.Repository;

namespace RE.Core.Business.Queries.Handlers.Alerts
{
    public class GetAlertQueryHandler : IRequestHandler<GetAlertQuery, AlertDto>
    {
        private readonly IAlertRepository _alertRepo;
        private readonly IMapper _mapper;

        public GetAlertQueryHandler(IAlertRepository alertRepo, IMapper mapper)
        {
            _alertRepo = alertRepo;
            _mapper = mapper;
        }

        public async Task<AlertDto> Handle(GetAlertQuery request, CancellationToken cancellationToken)
        {
            var alert = await _alertRepo.Get(request.Id, cancellationToken);
            return _mapper.Map<AlertDto>(alert);
        }
    }
}