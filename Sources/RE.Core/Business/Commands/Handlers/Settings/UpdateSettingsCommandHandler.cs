using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using MediatR;
using RE.Core.Business.Commands.Requests.Settings;
using RE.Core.Interfaces;
using RE.Domain.Entities;

namespace RE.Core.Business.Commands.Handlers.Settings
{
    public class UpdateSettingsCommandHandler : IRequestHandler<UpdateSettingsCommand>
    {
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;

        public UpdateSettingsCommandHandler(IApplicationDbContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        public async Task<Unit> Handle(UpdateSettingsCommand request, CancellationToken cancellationToken)
        {
            var settings = _mapper.Map<Configuration.Settings>(request);
            foreach (var propertyInfo in settings.GetType().GetProperties().Where(p => p.CanWrite))
            {
                var setting = await _context.Settings.FirstOrDefaultAsync(x => x.Key == propertyInfo.Name, cancellationToken);
                if (setting is not null)
                {
                    setting.Value = propertyInfo.GetValue(settings)?.ToString() ?? string.Empty;
                }
                else
                {
                    setting = CreateSetting(settings, propertyInfo);
                    _context.Settings.Add(setting);
                }
            }

            await _context.SaveChangesAsync(cancellationToken);

            return Unit.Value;
        }

        private Setting CreateSetting(Configuration.Settings settings, PropertyInfo propertyInfo)
        {
            return new Setting
            {
                Key = propertyInfo.Name,
                Value = propertyInfo.GetValue(settings)?.ToString() ?? string.Empty
            };
        }
    }
}