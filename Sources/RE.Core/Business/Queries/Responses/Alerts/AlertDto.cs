using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using RE.Core.Extensions;
using RE.Core.Interfaces;
using RE.Core.Models.Filters;
using RE.Domain.Constants;
using RE.Domain.Entities;

namespace RE.Core.Business.Queries.Responses.Alerts
{
    public class AlertDto : IMapFrom<Alert>
    {
        [DisplayName("Identifier")]
        public int Id { get; set; }

        [DisplayName("Email")]
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [DisplayName("Rooms")]
        public IList<RoomsFilter> RoomTypes { get; set; }

        [DisplayName("Floors")]
        public IList<FloorFilter> FloorTypes { get; set; }

        [DisplayName("Partitioning")]
        public IList<PartitioningFilter> PartitionTypes { get; set; }

        [DisplayName("Incoming offers")]
        public bool IncommingOffers { get; set; }

        [DisplayName("Price Fluctuation")]
        public bool ReevaluatedOffers { get; set; }

        public void Mapping(AutoMapper.Profile profile)
        {
            profile.CreateMap<Alert, AlertDto>()
                .ForMember(d => d.RoomTypes, s => s.MapFrom(w =>
                    w.Rooms.SplitBy(Delimiters.Semicolon).Select(x => x.ParseEnum<RoomsFilter>())))
                .ForMember(d => d.FloorTypes, s => s.MapFrom(w =>
                    w.Floors.SplitBy(Delimiters.Semicolon).Select(x => x.ParseEnum<FloorFilter>())))
                .ForMember(d => d.PartitionTypes, s => s.MapFrom(w =>
                    w.Partitioning.SplitBy(Delimiters.Semicolon).Select(x => x.ParseEnum<PartitioningFilter>())));
        }
    }
}
