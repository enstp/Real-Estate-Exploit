using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using HtmlAgilityPack;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using RE.Core.Builders;
using RE.Core.Extensions;
using RE.Core.Interfaces.Services;
using RE.Domain.Enums;

namespace RE.Core.Models.Scrapper
{
    public abstract class ScrapperModule
    {
        private readonly ILogger _logger;

        protected ScrapperModule(IServiceProvider serviceProvider, string baseUrl, ILogger logger)
        {
            _logger = logger;
            BaseUrl = baseUrl;
            ServiceProvider = serviceProvider;
        }

        protected IServiceProvider ServiceProvider { get; }

        public string Name
        {
            get
            {
                var scrapperNs = GetType().Namespace;
                return scrapperNs?.IndexOf('.') > -1
                    ? scrapperNs.Remove(0, scrapperNs.IndexOf('.') + 1)
                    : scrapperNs;
            }
        }

        protected string BaseUrl { get; }

        public IList<Ad> ParseOffers(Stopwatch sw)
        {
            var qp = GetSearchQueryParameter();
            var offerUris = GetOffersUris(qp);
            return ParseOffers(sw, offerUris);
        }

        public IList<Ad> ParseOffers(Stopwatch sw, List<Uri> offerUris)
        {
            var result = new ConcurrentBag<Ad>();
            _logger.LogInformation($"{DateTime.Now:HH:mm:ss} - {Name} Scrapper started. Number of offers: {offerUris.Count}");

            var chunksOfOffers = offerUris.SplitList(10);
            Parallel.ForEach(chunksOfOffers, chunkOffer =>
            {
                chunkOffer.ForEach(offerUri =>
                {
                    var offer = ProcessOffer(offerUri);
                    if (offer is not null) result.Add(offer);
                });
            });

            return result.ToList();
        }

        private Ad ProcessOffer(Uri offerUri)
        {
            try
            {
                return new RetryPolicyActionBuilder()
                    .WithExceptionMessage(_logger, $"{Name} - Fail to parse the offer url : {offerUri}")
                    .BuildAndExecute(() => ParseOffer(offerUri));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Maximum retries exceeded for {Name} - offer url : {offerUri}. This offer will be ignored");
            }

            return null;
        }

        private Ad ParseOffer(Uri offerUri)
        {
            var offerUrl = offerUri.ToString();

            var webSession = ServiceProvider.GetRequiredService<IWebSession>();
            var doc = webSession.Load(offerUrl, RequestType.Get);

            if(!ValidateStatusCode(webSession.StatusCode))
                return null;

            var url = RetrieveUrl(offerUri);
            var addUid = RetrieveSku(offerUri);
            var title = RetrieveTitle(doc);
            var price = RetrievePrice(doc);
            var timeStamp = RetrievePublishDate(doc);
            var rooms = RetrieveRooms(doc);
            var floor = RetrieveFloor(doc);
            var year = RetrieveYear(doc);
            var partitioning = RetrievePartitioning(doc);
            var usableArea = RetrieveUsableArea(doc);
            var totalArea = RetrieveTotalArea(doc);

            return new Ad
            {
                Host = offerUri.Host,
                Url = url,
                Title = title,
                Price = price,
                Sku = addUid,
                PublishDate = timeStamp,

                Rooms = rooms,
                Floor = floor,
                Year = year,
                Partitioning = partitioning,

                UsableArea = usableArea,
                TotalArea = totalArea,
            };
        }

        private bool ValidateStatusCode(HttpStatusCode statusCode)
        {
            return statusCode != HttpStatusCode.NotFound &&
                   statusCode != HttpStatusCode.Moved && 
                   statusCode != HttpStatusCode.MovedPermanently &&
                   statusCode != HttpStatusCode.Redirect;
        }

        protected abstract QueryParameter GetSearchQueryParameter();

        protected abstract List<Uri> GetOffersUris(QueryParameter queryParameter);

        protected virtual Uri RetrieveUrl(Uri offerUri) => offerUri;

        protected abstract string RetrieveSku(Uri offerUri);

        protected abstract DateTimeOffset? RetrievePublishDate(HtmlDocument doc);

        protected abstract string RetrieveTitle(HtmlDocument doc);

        protected abstract decimal RetrievePrice(HtmlDocument doc);

        protected abstract short RetrieveRooms(HtmlDocument doc);

        protected abstract short? RetrieveFloor(HtmlDocument doc);

        protected abstract string RetrieveYear(HtmlDocument doc);

        protected abstract string RetrievePartitioning(HtmlDocument doc);

        protected abstract int? RetrieveUsableArea(HtmlDocument doc);

        protected abstract int? RetrieveTotalArea(HtmlDocument doc);
    }
}