using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using RE.Core.Business.Commands.Requests.Jobs;
using RE.Core.Extensions;
using RE.Core.Interfaces.Repository;
using RE.Core.Interfaces.Services;

namespace RE.Core.Business.Commands.Handlers.Jobs
{
    public class MonitorCommandHandler : IRequestHandler<MonitorCommand, bool>
    {
        private readonly IOfferRepository _offerRepo;
        private readonly IScrapperService _scrapperService;
        private readonly IOfferSyncronizer _offerSyncronizer;
        private readonly ILogger<MonitorCommandHandler> _logger;

        public MonitorCommandHandler(
            IOfferRepository offerRepo,
            IScrapperService scrapperService,
            IOfferSyncronizer offerSyncronizer,
            ILogger<MonitorCommandHandler> logger)
        {
            _offerRepo = offerRepo;
            _scrapperService = scrapperService;
            _offerSyncronizer = offerSyncronizer;
            _logger = logger;
        }
        
        public async Task<bool> Handle(MonitorCommand request, CancellationToken cancellationToken)
        {
            var activeOffers = await _offerRepo.Query().OnlyActive().ToListAsync(cancellationToken);
            var offers = await _scrapperService.ScrapOffers(activeOffers.Select(o => new Uri(o.Url)).ToList(), cancellationToken);
            var inactiveOffers = activeOffers.Where(ao => offers.All(o => o.Sku != ao.Uid)).ToList();
            await _offerSyncronizer.UnSync(inactiveOffers, cancellationToken);

            _logger.LogInformation($"{inactiveOffers.Count()} offers expired from last checking");
            return await Task.FromResult(true);
        }
    }
}