using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using RE.Core.Interfaces;
using RE.Domain.Entities;
using RE.Domain.Enums;

namespace RE.Core.Business.Queries.Responses.Offers
{
    public class OfferDto : IMapFrom<Offer>
    {
        public int Id { get; set; }

        public int WebsiteId { get; set; }

        [DisplayName("Sku")]
        [Required]
        [MaxLength(50)]
        public string Uid { get; set; }

        [DisplayName("Website")]
        [Required]
        public string Domain { get; set; }

        [DisplayName("Link")]
        [Required]
        [MaxLength(200)]
        public string Url { get; set; }

        [DisplayName("Title")]
        [Required]
        [MaxLength(500)]
        public string Title { get; set; }

        [DisplayName("Number of rooms")]
        public short Rooms { get; set; }

        [DisplayName("Floor number")]
        [DefaultValue("Unspecified")]
        public short? Floor { get; set; }

        [DisplayName("Year")]
        [MaxLength(20)]
        public string Year { get; set; }

        [DisplayName("Partitioning")]
        [MaxLength(20)]
        public string Partitioning { get; set; }

        [DisplayName("Usable square meters")]
        [DefaultValue("Unspecified")]
        public int? UsableArea { get; set; }

        [DisplayName("Total square meters")]
        [DefaultValue("Unspecified")]
        public int? TotalArea { get; set; }

        [DisplayName("Active")]
        public bool Active { get; set; }

        [DisplayName("Evaluations")]
        public int Evaluations { get; set; }

        [DisplayName("Current Price")]
        [DisplayFormat(DataFormatString = "{0:0} €")]
        public decimal Price { get; set; }

        [DisplayName("Old Price")]
        [DisplayFormat(DataFormatString = "{0:0} €")]
        public decimal? OldPrice { get; set; }

        [DisplayName("Publish Date")]
        [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}")]
        public DateTime PublishDate { get; set; }

        [DisplayName("Trend")]
        public Trend Trend { get; set; }

        public void Mapping(AutoMapper.Profile profile)
        {
            profile.CreateMap<Offer, OfferDto>()
                .ForMember(d => d.WebsiteId, s => s.MapFrom(w => w.WebsiteId))
                .ForMember(d => d.Domain, s => s.MapFrom(w => w.Website.Domain))
                .ForMember(d => d.Active, s => s.MapFrom(w => !w.ExpiredAt.HasValue))
                .ForMember(d => d.UsableArea, s => s.MapFrom(w => w.Area.Usable))
                .ForMember(d => d.TotalArea, s => s.MapFrom(w => w.Area.Total))
                .ForMember(d => d.Evaluations, s => s.MapFrom(w => w.Evaluations.Count))
                .ForMember(d => d.Price, s => s.MapFrom(w => w.Evaluations.OrderByDescending(e => e.CapturedAt).First().Amount))
                .ForMember(d => d.OldPrice, s => s.MapFrom(w => 
                    w.Evaluations.OrderByDescending(e => e.CapturedAt).Skip(1).Any()
                        ? w.Evaluations.OrderByDescending(e => e.CapturedAt).Skip(1).First().Amount
                        : default(decimal?)))
                .ForMember(d => d.PublishDate, s => s.MapFrom(w => w.PublishedAt))
                .ForMember(d => d.Trend, s => s.MapFrom(w => 
                    w.Evaluations.Count == 1 
                        ? Trend.Linear 
                        : w.Evaluations.OrderByDescending(e => e.CapturedAt).First().Amount // most recent
                            > w.Evaluations.OrderByDescending(e => e.CapturedAt).Skip(1).First().Amount // most recent but one
                                ? Trend.Ascending: Trend.Descending));
        }
    }
}
