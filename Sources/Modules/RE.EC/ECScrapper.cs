using System;
using System.Collections.Generic;
using System.Linq;
using HtmlAgilityPack;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using RE.Core.Configuration;
using RE.Core.Extensions;
using RE.Core.Interfaces.Services;
using RE.Core.Models.Scrapper;
using RE.Domain.Enums;

/*
 * https://www.casaprima.ro/oferte
 */

namespace RE.EC
{
    public class ECScrapper : ScrapperModule
    {
        private readonly Settings _settings;

        public ECScrapper(IServiceProvider serviceProvider, Settings settings, ILogger<ScrapperModule> logger, string baseUrl)
            : base(serviceProvider, baseUrl, logger)
        {
            _settings = settings;
        }

        protected override QueryParameter GetSearchQueryParameter()
        {
            return new()
            {
                ["page"] = "1"
            };
        }

        protected override List<Uri> GetOffersUris(QueryParameter queryParameter)
        {
            var offers = new List<string>();
            var pageNo = 1;
            var webSession = ServiceProvider.GetRequiredService<IWebSession>();

            while (offers.Count < _settings.OfferCount)
            {
                queryParameter["page"] = pageNo++.ToString();
                var pageUrl = $"{BaseUrl}{queryParameter}";
                var doc = webSession.Load(pageUrl, RequestType.Get);

                var offerTitles = doc.DocumentNode.SelectNodes("//h3[@class='project-title']").ToList();
                var offerLinks = offerTitles.Select(o => o.SelectSingleNode(".//a")).ToList();
                var offerUrls = offerLinks.Select(l => l.Attributes["href"].Value).ToList();
                var pristineUrls = offerUrls.Distinct().Where(u => offers.All(o => o != u)).ToList();

                offers.AddRange(pristineUrls);
            }

            return offers.Take(_settings.OfferCount).Select(o => new Uri(o)).ToList();
        }

        protected override string RetrieveSku(Uri offerUri)
        {
            return offerUri.AbsoluteUri.Substring(offerUri.AbsoluteUri.LastIndexOf("_") + 1);
        }

        protected override DateTimeOffset? RetrievePublishDate(HtmlDocument doc)
        {
            return default;
        }

        protected override string RetrieveTitle(HtmlDocument doc)
        {
            var titleElem = doc.DocumentNode.Descendants("h2").First(x => x.ContainsAttributeWithValue("class", "entry-title"));
            var title = titleElem.FirstChild.InnerText.Trim().TrimEnd('-').Trim();
            return title;
        }

        protected override decimal RetrievePrice(HtmlDocument doc)
        {
            var priceElem = doc.DocumentNode.Descendants("span").First(x => x.ContainsAttributeWithValue("class", "price"));
            var priceText = priceElem.InnerText.HtmlDecode().Replace("€", string.Empty).Trim();
            priceText = priceText.ExtractNumber();
            return decimal.Parse(priceText);
        }

        protected override short RetrieveRooms(HtmlDocument doc)
        {
            var roomsNoLabel = doc.DocumentNode.Descendants("strong").First(x => x.InnerText.Contains("Camere:"));
            var roomsNoElem = roomsNoLabel.NextSibling.NextSibling;
            var roomsNoStr = roomsNoElem.InnerText.Trim();
            return short.Parse(roomsNoStr);
        }

        protected override short? RetrieveFloor(HtmlDocument doc)
        {
            var floorLabel = doc.DocumentNode.Descendants("strong").First(x => x.InnerText.Contains("Etaj:"));
            var floorElem = floorLabel.NextSibling.NextSibling;
            var floorStr = floorElem.InnerText.Trim();
            var specialFloors = new List<string> { "Penthouse", "Mansarda" };
            return floorStr switch
            {
                var f when specialFloors.Contains(f) => (short?)null,
                "Parter" => 0,
                "Demisol" => -1,
                _ => floorStr.Convert<short?>()
            };
        }

        protected override string RetrieveYear(HtmlDocument doc)
        {
            var yearLabel = doc.DocumentNode.Descendants("strong").First(x => x.InnerText.Contains("An construcţie:"));
            var yearElem = yearLabel.NextSibling.NextSibling;
            return yearElem.InnerText.Trim();
        }

        protected override string RetrievePartitioning(HtmlDocument doc)
        {
            var partitioningLabel = doc.DocumentNode.Descendants("strong").First(x => x.InnerText.Contains("Compartimentare:"));
            var partitioningElem = partitioningLabel.NextSibling.NextSibling;
            return partitioningElem.InnerText.Trim();
        }

        protected override int? RetrieveUsableArea(HtmlDocument doc)
        {
            var usableAreaLabel = doc.DocumentNode.Descendants("strong").First(x => x.InnerText.Contains("Suprafața utilă:"));
            var usableAreaElem = usableAreaLabel.NextSibling.NextSibling;
            var usableArea = usableAreaElem.InnerText.Replace("m²", string.Empty).Replace("m2", string.Empty).Trim();
            return (int) Math.Round(usableArea.Convert<double>());
        }

        protected override int? RetrieveTotalArea(HtmlDocument doc)
        {
            var totalAreaLabel = doc.DocumentNode.Descendants("strong").FirstOrDefault(x => x.InnerText.Contains("Suprafața construită:"));
            var totalAreaElem = totalAreaLabel?.NextSibling.NextSibling;
            var totalArea = totalAreaElem?.InnerText.Replace("m²", string.Empty).Replace("m2", string.Empty).Trim();
            return totalArea is not null
                ? (int)Math.Round(totalArea.Convert<double>())
                : (int?)null;
        }
    }
}