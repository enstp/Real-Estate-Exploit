using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using RE.Core.Business.Commands.Handlers.Jobs;
using RE.Core.Business.Commands.Requests.Captures;
using RE.Core.Business.Queries.Responses.Offers;
using RE.Core.Interfaces;
using RE.Core.Interfaces.Services;

namespace RE.Core.Business.Commands.Handlers.Captures
{
    public class TakeScreenShotsCommandHandler : IRequestHandler<TakeScreenShotsCommand>
    {
        private readonly IApplicationDbContext _dbContext;
        private readonly IFileService _fileService;
        private readonly IMediator _mediator;
        private readonly IMapper _mapper;
        private readonly Configuration.Settings _settings;
        private readonly ILogger<MonitorCommandHandler> _logger;

        public TakeScreenShotsCommandHandler(
            IApplicationDbContext dbContext,
            IFileService fileService,
            IMediator mediator,
            IMapper mapper,
            Configuration.Settings settings,
            ILogger<MonitorCommandHandler> logger)
        {
            _dbContext = dbContext;
            _fileService = fileService;
            _mediator = mediator;
            _mapper = mapper;
            _settings = settings;
            _logger = logger;
        }
        
        public async Task<Unit> Handle(TakeScreenShotsCommand request, CancellationToken cancellationToken)
        {
            var offers = await _dbContext.Offers
                .Include(o => o.Website)
                .Include(o => o.Evaluations)
                .Where(o => request.Ids.Contains(o.Id))
                .ProjectTo<OfferDto>(_mapper.ConfigurationProvider)
                .ToListAsync(cancellationToken);

            if (_settings.TakeScreenShots)
            {
                foreach (var offer in offers)
                {
                    var offerFile = await _fileService.SaveOffer(offer, cancellationToken);
                    _logger.LogInformation("Offer {offer} saved into file {file}", offer, offerFile);
                }
            }

            _logger.LogInformation($"{offers.Count} offers change their prices. {(_settings.TakeScreenShots ? "Screen shots taken successfully!" : "")}");
            return Unit.Value;
        }
    }
}