using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace RE.Core.Models.Pagination
{
    public class PagingData
    {
        private readonly PagingInfo _pagingInfo;

        public PagingData(int totalNumberOfItems, PagingInfo pagingInfo)
        {
            _pagingInfo = pagingInfo;
            TotalNumberOfItems = totalNumberOfItems;
            AvailablePageSizes = new[] {
                pagingInfo.InitialPageSize,
                pagingInfo.InitialPageSize * 2.5,
                pagingInfo.InitialPageSize * 5,
                pagingInfo.InitialPageSize * 7.5,
                pagingInfo.InitialPageSize * 10 }
            .Select(c => new SelectListItem { Text = c.ToString(), Value = c.ToString() }).ToList();
        }

        public int TotalNumberOfItems { get; }
        
        public int NumberOfPages => (int)Math.Ceiling(TotalNumberOfItems / (double)_pagingInfo.PageSize);
        
        public int CurrentPage => _pagingInfo.CurrentPage;
        
        public int PageSize => _pagingInfo.PageSize;
        
        public List<SelectListItem> AvailablePageSizes { get; set; }

        public IEnumerable<int> PagesToDisplay => GetPagesToDisplay().ToList().Distinct();

        private IEnumerable<int> GetPagesToDisplay()
        {
            if (NumberOfPages == 0)
            {
                yield break;
            }

            for (var i = 1; i <= Math.Min(2, NumberOfPages); i++)
            {
                yield return i;
            }

            for (var i = Math.Max(CurrentPage - 1, 1); i <= Math.Min(CurrentPage + 1, NumberOfPages); i++)
            {
                yield return i;
            }

            for (var i = Math.Max(NumberOfPages - 2, 1); i <= NumberOfPages; i++)
            {
                yield return i;
            }
        }
    }
}