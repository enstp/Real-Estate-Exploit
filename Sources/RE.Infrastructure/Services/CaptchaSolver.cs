using DeathByCaptcha;
using Microsoft.Extensions.Options;
using RE.Core.Configuration;
using RE.Core.Exceptions;
using RE.Core.Interfaces.Services;

namespace RE.Infrastructure.Services
{
    public class CaptchaSolver : ICaptchaSolver
    {
        private readonly DeathByCaptchaSettings _deathByCaptchaSettings;

        public CaptchaSolver(IOptions<DeathByCaptchaSettings> deathByCaptchaSettingsOptions)
        {
            _deathByCaptchaSettings = deathByCaptchaSettingsOptions.Value;
        }

        public string Solve(byte[] imageArray)
        {
            var client = (Client) new SocketClient(_deathByCaptchaSettings.UserName, _deathByCaptchaSettings.Password);
            if (client.Balance <= 0)
            {
                throw new NotSufficientFoundsException(client.Balance);
            }

            var captcha = client.Decode(imageArray, Client.DefaultTimeout);
            if (!captcha.Solved)
            {
                throw new CaptchaNotSolvedException(captcha.Id, imageArray);
            }
            
            return captcha.Text;
        }
    }
}