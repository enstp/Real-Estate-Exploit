using System.Collections.Generic;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using RE.Core.Extensions;
using RE.Core.Interfaces.Communication;
using RE.Core.Models.Communication;
using SendGrid;
using SendGrid.Helpers.Mail;

namespace RE.Infrastructure.Communication
{
    public class SendGridProvider : IEmailProvider
    {
        private readonly SendGridClient _sendGridClient;

        public SendGridProvider(string apiKey)
        {
            _sendGridClient = new SendGridClient(apiKey);
        }

        public async Task<EmailResponse> SendAsync(EmailMessage emailMessage)
        {
            var message = MailHelper.CreateSingleEmailToMultipleRecipients(
                new EmailAddress(emailMessage.FromAddress, emailMessage.FromName),
                CreateEmailAddressesFromList(emailMessage.To),
                emailMessage.Subject,
                null,
                emailMessage.Body.HtmlDecode());

            AddCc(message, emailMessage);
            AddBcc(message, emailMessage);
            AddAttachments(message, emailMessage);

            var response = await _sendGridClient.SendEmailAsync(message);

            var messageId = GetMessageIdFromHeaders(response.Headers);

            return string.IsNullOrEmpty(messageId)
                ? await CreateResponseError(response, emailMessage)
                : new EmailResponse(true, emailReferenceId: messageId);
        }

        private static void AddCc(SendGridMessage message, EmailMessage emailMessage)
        {
            var ccs = emailMessage.Cc.Where(cc => cc is not null).ToList();
            if (ccs.Any())
            {
                message.AddCcs(CreateEmailAddressesFromList(emailMessage.Cc));
            }
        }

        private static void AddBcc(SendGridMessage message, EmailMessage emailMessage)
        {
            var bccs = emailMessage.Bcc.Where(bcc => !emailMessage.Cc.Contains(bcc) && bcc is not null).ToList();
            if (bccs.Any())
            {
                message.AddBccs(CreateEmailAddressesFromList(bccs));
            }
        }

        private static List<EmailAddress> CreateEmailAddressesFromList(IEnumerable<string> emails)
        {
            return emails.Select(address => new EmailAddress(address)).ToList();
        }

        private static void AddAttachments(SendGridMessage message, EmailMessage emailMessage)
        {
            if (emailMessage.Attachments is not null && emailMessage.Attachments.Any())
            {
                message.AddAttachments(emailMessage.Attachments.Select(attachment => new Attachment
                {
                    Filename = attachment.Filename,
                    Content = attachment.Content,
                    Type = attachment.Type,
                    ContentId = attachment.ContentId,
                    Disposition = attachment.Disposition
                }).ToList());
            }
        }

        private static string GetMessageIdFromHeaders(HttpHeaders headers)
        {
            return headers.TryGetValues("X-Message-Id", out var headerValues)
                ? headerValues.FirstOrDefault()
                : null;
        }

        private static async Task<EmailResponse> CreateResponseError(Response response, EmailMessage emailMessage)
        {
            var sb = new StringBuilder();

            sb.AppendLine($"The following email failed to be sent: {JsonConvert.SerializeObject(emailMessage)}");
            sb.AppendLine("Could not get MessageId from Send Grid Send Email Response. " +
                          $"Headers: {JsonConvert.SerializeObject(response.Headers)}");

            var responseBody = await response.Body.ReadAsStringAsync();
            if (!string.IsNullOrEmpty(responseBody))
            {
                sb.AppendLine("Errors:");
                var errorResponse = JsonConvert.DeserializeObject<SendgridErrorResponse>(responseBody);
                errorResponse.Errors.ForEach(e =>
                {
                    sb.AppendLine($"Field at issue: {e.Field}");
                    sb.AppendLine($"Message: {e.Message}");
                    sb.AppendLine();
                });
            }

            return new EmailResponse(false, error: sb.ToString());
        }
    }
}
