using System.Threading;
using System.Threading.Tasks;
using MediatR;
using RE.Core.Business.Commands.Requests.Offers;
using RE.Core.Exceptions;
using RE.Core.Interfaces;
using RE.Core.Interfaces.Repository;
using RE.Core.Models.Inclusions;
using RE.Domain.Entities;

namespace RE.Core.Business.Commands.Handlers.Offers
{
    public class DeleteOfferCommandHandler : IRequestHandler<DeleteOfferCommand>
    {
        private readonly IOfferRepository _oferRepo;
        private readonly IApplicationDbContext _dbContext;

        public DeleteOfferCommandHandler(IOfferRepository oferRepo, IApplicationDbContext dbContext)
        {
            _oferRepo = oferRepo;
            _dbContext = dbContext;
        }

        public async Task<Unit> Handle(DeleteOfferCommand request, CancellationToken cancellationToken)
        {
            var entity = await _oferRepo.Get(request.Id, new OfferInclusions { IncludeEvaluations = true }, cancellationToken);
            if (entity is null)
            {
                throw new NotFoundException(nameof(Offer), request.Id);
            }

            _dbContext.Evaluations.RemoveRange(entity.Evaluations);
            await _oferRepo.Delete(entity, cancellationToken);

            return Unit.Value;
        }
    }
}