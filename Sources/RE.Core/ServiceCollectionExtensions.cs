using System.Linq;
using System.Reflection;
using FluentValidation;
using MediatR;
using MediatR.Pipeline;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using RE.Core.Behaviours;
using RE.Core.Configuration;

namespace RE.Core
{
    public static class ServiceCollectionExtensions
    {
        private static readonly Assembly _currentAssembly = Assembly.GetExecutingAssembly();

        public static IServiceCollection AddApplication(this IServiceCollection services, IConfigurationRoot configuration)
        {
            services.AddConfiguration(configuration);
            services.AddMapper();
            services.AddFluentValidation();
            services.AddMediaRandCQRS();

            return services;
        }

        private static void AddConfiguration(this IServiceCollection services, IConfigurationRoot configuration)
        {
            services.Configure<SendGridSettings>(configuration.GetSection("SendGrid"));
            services.Configure<ScreenShotMachineSettings>(configuration.GetSection("ScreenShotMachine"));
            services.Configure<DeathByCaptchaSettings>(configuration.GetSection("DeathByCaptcha"));
            services.Configure<UrlSettings>(configuration.GetSection("UrlSettings"));

            services.Configure<Settings>(configuration);
            services.AddScoped(cfg => cfg.GetService<IOptionsSnapshot<Settings>>().Value); 
            services.AddSingleton(configuration); 
        }

        private static void AddMapper(this IServiceCollection services)
        {
            services.AddAutoMapper(_currentAssembly);
        }

        private static void AddFluentValidation(this IServiceCollection services)
        {
            var validatorType = typeof(IValidator<>);

            var validatorTypes = _currentAssembly
                .GetExportedTypes()
                .Where(t => t.GetInterfaces().Any(i => i.IsGenericType && i.GetGenericTypeDefinition() == validatorType));

            foreach (var validator in validatorTypes)
            {
                var requestType = validator.GetInterfaces()
                    .Where(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IValidator<>))
                    .Select(i => i.GetGenericArguments()[0])
                    .First();

                var validatorInterface = validatorType.MakeGenericType(requestType);
                services.AddTransient(validatorInterface, validator);
            }
        }

        private static void AddMediaRandCQRS(this IServiceCollection services)
        {
            services.AddMediatR(_currentAssembly);

            services.AddScoped(typeof(IPipelineBehavior<,>), typeof(RequestPerformanceBehaviour<,>));
            services.AddScoped(typeof(IPipelineBehavior<,>), typeof(RequestValidationBehavior<,>));
            services.AddScoped(typeof(IPipelineBehavior<,>), typeof(UnhandledExceptionBehaviour<,>));
            
            services.AddScoped(typeof(IRequestPreProcessor<>), typeof(RequestLoggerPreprocessor<>));
            services.AddScoped(typeof(IRequestPreProcessor<>), typeof(RequestBasePreprocessor<>));
        }
    }
}
