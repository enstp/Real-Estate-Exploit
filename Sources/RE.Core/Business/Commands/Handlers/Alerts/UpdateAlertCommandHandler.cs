using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using MediatR;
using RE.Core.Business.Commands.Requests.Alerts;
using RE.Core.Exceptions;
using RE.Core.Extensions;
using RE.Core.Interfaces.Repository;
using RE.Domain.Constants;
using RE.Domain.Entities;

namespace RE.Core.Business.Commands.Handlers.Alerts
{
    public class UpdateAlertCommandHandler : IRequestHandler<UpdateAlertCommand>
    {
        private readonly IAlertRepository _alertRepo;

        public UpdateAlertCommandHandler(IAlertRepository alertRepo)
        {
            _alertRepo = alertRepo;
        }

        public async Task<Unit> Handle(UpdateAlertCommand request, CancellationToken cancellationToken)
        {
            var entity = await _alertRepo.Get(request.Id, cancellationToken);
            if (entity is null)
            {
                throw new NotFoundException(nameof(Alert), request.Id);
            }
            
            entity.Email = request.Email;
            entity.Rooms = request.RoomTypes.Select(r => (int)r).JoinBy(Delimiters.Semicolon);
            entity.Floors = request.FloorTypes.Select(f => (int)f).JoinBy(Delimiters.Semicolon);
            entity.Partitioning = request.PartitionTypes.Select(p => (int)p).JoinBy(Delimiters.Semicolon);
            entity.IncommingOffers = request.IncommingOffers;
            entity.ReevaluatedOffers = request.ReevaluatedOffers;
            
            await _alertRepo.Update(entity, cancellationToken);

            return Unit.Value;
        }
    }
}