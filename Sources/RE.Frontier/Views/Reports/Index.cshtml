@using RE.Core.Business.Queries.Responses.Reports;
@using Microsoft.AspNetCore.Routing
@using RE.Core.Extensions
@using RE.Core.Models.Filters
@model ReportsResponse

@{
    ViewData["Title"] = "Home Page";
    var rooms = Context.GetRouteData().Values.Last().Value.ToString().ParseEnum<RoomsFilter>();
    var fullRooms = $"{rooms.GetDisplayName()} {(rooms == RoomsFilter.One ? "room" : "rooms")}";
}

<div class="row">
    <div class="col-md-3 col-menu">
        <partial name="_ManageNav" for="Websites" />
    </div>
    <div class="col-md-9 col-grid">
        <ul class="nav nav-tabs">
            @foreach (var room in Enum.GetValues<RoomsFilter>())
            {
                <li class="nav-item">
                    <a class="nav-link" asp-controller="Reports" asp-route-rooms="@room"
                       asp-conditional-class-active="@(rooms.Equals(room))">
                        @room.GetDisplayName() @(room == RoomsFilter.One ? " room" : "rooms")
                    </a>
                </li>
            }
        </ul>

        <div class="row p-4 p-2">
            <div class="col-md-6">
                <h6 class="font-weight-bold font-size-xl mb-1 text-black">
                    @fullRooms
                </h6>
                <p class="text-black-50 font-size-lg mb-0">
                    @Model.RoomOffers.Count apartments
                </p>
            </div>
            <div class="col-md-6">
                <div class="float-right chron-interval">
                    <button class="btn btn-outline-info mr-1 active" onclick="updateData('one_month')">
                        1M
                    </button>
                    <button class="btn btn-outline-info mr-1" onclick="updateData('six_months')">
                        <span>6M</span>
                    </button>
                    <button class="btn btn-outline-info mr-1" onclick="updateData('one_year')">
                        <span>1Y</span>
                    </button>
                    <button class="btn btn-outline-info mr-1" onclick="updateData('ytd')">
                        <span>YTD</span>
                    </button>
                    <button class="btn btn-outline-info mr-1" onclick="updateData('all')">
                        <span>ALL</span>
                    </button>
                </div>
            </div>
        </div>

        <div id="average-price-chart">
            <!-- Injected average price chart -->
        </div>

        <div id="offers-chart" class="mt-5">
            <!-- Injected offers chart -->
        </div>

        <div class="p-4 text-center">
            <button class="btn btn-primary hover-scale-sm px-5" onclick="handleExport()">
                <i class="fas fa-download"></i>
                Generate Report
            </button>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script type="text/javascript">
        var avgPriceChartSelector = '#average-price-chart';
        var offersChartSelector = '#offers-chart';
        var avgPriceChart = null, avgPriceOptions = null;
        var offersChart = null, offersOptions = null;
        var fileName = '@fullRooms';

        $(document).ready(function() {
            var averagePriceSeries = [], offersSeries = [];
            @foreach (var dayPrice in Model.RoomOffers)
            {
                @:var day = '@dayPrice.DateTime.ToString("s")';
                @:var offers = @dayPrice.Offers;
                @:var avgPrice = @dayPrice.AveragePrice;
                @:offersSeries.push([moment(day).valueOf(), offers]);
                @:averagePriceSeries.push([moment(day).valueOf(), avgPrice]);
            }

            avgPriceOptions = {
                series: [
                    {
                        name: 'Average Price',
                        type: 'area',
                        data: averagePriceSeries
                    }
                ],
                chart: {
                    id: 'area-datetime',
                    type: 'area',
                    height: 350,
                    zoom: {
                        autoScaleYaxis: true
                    },
                    toolbar: {
                        export: {
                            csv: {
                                filename: `Aferage price [${fileName}]`,
                                columnDelimiter: ','
                            },
                            svg: {
                                filename: `Aferage price [${fileName}]`,
                            },
                            png: {
                                filename: `Aferage price [${fileName}]`
                            }
                        }
                    }
                },
                annotations: {
                    yaxis: [
                        {
                            y: 30,
                            borderColor: '#999',
                            label: {
                                show: true,
                                text: 'Support',
                                style: {
                                    color: "#fff",
                                    background: '#00E396'
                                }
                            }
                        }
                    ],
                    xaxis: [
                        {
                            x: moment().subtract(1, 'months').add(15, 'days').valueOf(),
                            borderColor: '#999',
                            yAxisIndex: 0,
                            label: {
                                show: true,
                                text: 'This moment',
                                style: {
                                    color: "#fff",
                                    background: '#775DD0'
                                }
                            }
                        }
                    ]
                },
                dataLabels: {
                    enabled: false
                },
                markers: {
                    size: 0,
                    style: 'hollow'
                },
                xaxis: {
                    type: 'datetime',
                    min: moment().subtract(1, 'months').valueOf(),
                    tickAmount: 6,
                    title: {
                        text: 'Average price - last month',
                        offsetY: 3
                    }
                },
                yaxis: [
                    {
                        labels: {
                            formatter: function(val) {
                                return `${val.toFixed(0)}€`;
                            }
                        }
                    }
                ],
                tooltip: {
                    x: {
                        format: 'dd MMM yyyy'
                    },
                    y: {
                        formatter: function(val) {
                            return `${val.toFixed(0)}€`;
                        }
                    }
                },
                fill: {
                    type: 'gradient',
                    gradient: {
                        shadeIntensity: 1,
                        opacityFrom: 0.7,
                        opacityTo: 0.9,
                        stops: [0, 100]
                    }
                }
            };

            avgPriceChart = new ApexCharts(document.querySelector(avgPriceChartSelector), avgPriceOptions);
            avgPriceChart.render();


            offersOptions = {
                series: [
                    {
                        name: 'Offers count',
                        type: 'column',
                        data: offersSeries
                    }
                ],
                colors: ['#00E396'],
                chart: {
                    id: 'area-datetime',
                    type: 'line',
                    height: 350,
                    zoom: {
                        autoScaleYaxis: true
                    },
                    toolbar: {
                        export: {
                            csv: {
                                filename: `Offers [${fileName}]`,
                                columnDelimiter: ','
                            },
                            svg: {
                                filename: `Offers [${fileName}]`,
                            },
                            png: {
                                filename: `Offers [${fileName}]`,
                            }
                        }
                    }
                },
                annotations: {
                    yaxis: [
                        {
                            y: 30,
                            borderColor: '#999',
                            label: {
                                show: true,
                                style: {
                                    color: "#fff",
                                    background: '#00E396'
                                }
                            }
                        }
                    ],
                    xaxis: [
                        {
                            x: moment().subtract(1, 'months').add(15, 'days').valueOf(),
                            borderColor: '#999',
                            yAxisIndex: 0,
                            label: {
                                show: true,
                                text: 'This moment',
                                style: {
                                    color: "#fff",
                                    background: '#775DD0'
                                }
                            }
                        }
                    ]
                },
                dataLabels: {
                    enabled: false
                },
                markers: {
                    size: 0,
                    style: 'hollow'
                },
                xaxis: {
                    type: 'datetime',
                    min: moment().subtract(1, 'months').valueOf(),
                    tickAmount: 6,
                    title: {
                        text: 'Published offers - last month',
                        offsetY: 3
                    }
                },
                yaxis: [
                    {
                        labels: {
                            formatter: function(val) {
                                return val.toFixed(0);
                            }
                        }
                    }
                ],
                tooltip: {
                    x: {
                        format: 'dd MMM yyyy'
                    },
                    y: {
                        formatter: function(val) {
                            return val.toFixed(0);
                        }
                    }
                },
                fill: {
                    opacity: [0.85, 0.25, 1],
                    gradient: {
                        inverseColors: false,
                        shade: 'light',
                        type: "vertical",
                        opacityFrom: 0.85,
                        opacityTo: 0.55,
                        stops: [0, 100, 100, 100]
                    }
                }
            };

            offersChart = new ApexCharts(document.querySelector(offersChartSelector), offersOptions);
            offersChart.render();
        });

        function updateData(timeline) {
            let momentStart, momentEnd, chron;
            let jqThis = $(this);

            $('.chron-interval').find('.btn').removeClass('active');
            var chronoBtns = $('.chron-interval').find('.btn');
            var chronoBtn = null;

            switch (timeline) {
            case 'one_month':
                momentStart = moment().subtract(1, 'months');
                momentEnd = moment();
                chronoBtn = chronoBtns[0];
                chron = 'last month';
                break;
            case 'six_months':
                momentStart = moment().subtract(6, 'months');
                momentEnd = moment();
                chronoBtn = chronoBtns[1];
                chron = 'last 6 months';
                break;
            case 'one_year':
                momentStart = moment().subtract(1, 'years');
                momentEnd = moment();
                chronoBtn = chronoBtns[2];
                chron = 'last year';
                break;
            case 'ytd':
                momentStart = moment().startOf('year');
                momentEnd = moment().endOf('year');
                chronoBtn = chronoBtns[3];
                chron = 'current year';
                break;
            case 'all':
                momentStart = moment().subtract(1, 'years').startOf('year');
                momentEnd = moment();
                chronoBtn = chronoBtns[4];
                chron = 'all time';
                break;
            default:
                momentStart = moment();
                momentEnd = moment();
                chronoBtn = chronoBtns[0];
                chron = 'interval';
                break;
            }

            $(chronoBtn).addClass('active');

            avgPriceChart.updateOptions({
                xaxis: {
                    ...avgPriceOptions.xaxis,
                    min: momentStart.valueOf(),
                    max: momentEnd.valueOf(),
                    title: {
                        ...avgPriceOptions.xaxis.title,
                        text: `Average price - ${chron}`
                    }
                }
            });
            offersChart.updateOptions({
                xaxis: {
                    ...offersOptions.xaxis,
                    min: momentStart.valueOf(),
                    max: momentEnd.valueOf(),
                    title: {
                        ...offersOptions.xaxis.title,
                        text: `Published offers - ${chron}`
                    }
                }
            });
        }

        function handleExport() {
            var offersSummary = [['Date', 'Offers', 'Average Price']];
            @foreach (var dayPrice in Model.RoomOffers)
            {
                @:var day = '@dayPrice.DateTime.ToString("s")';
                @:var offers = @dayPrice.Offers;
                @:var avgPrice = @decimal.Round(dayPrice.AveragePrice, 2);
                @:offersSummary.push([moment(day).format('L'), offers.toString(), avgPrice]);
            }

            let csvContent = "data:text/csv;charset=utf-8,";
            offersSummary.forEach(function(rowArray) {
                let row = rowArray.join(",");
                csvContent += row + "\r\n";
            });

            var encodedUri = encodeURI(csvContent);
            var link = document.createElement('a');
            link.setAttribute('href', encodedUri);
            link.setAttribute('download', `Offers summary [${fileName}].csv`);
            document.body.appendChild(link); // Required for FF
            link.click();
        }

    </script>
}