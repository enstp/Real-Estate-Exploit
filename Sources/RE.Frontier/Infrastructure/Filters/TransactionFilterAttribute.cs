using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.AspNetCore.Routing;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using RE.Infrastructure.Persistence;

namespace RE.Frontier.Infrastructure.Filters
{
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]
    public class TransactionFilterAttribute : ActionFilterAttribute
    {
        private readonly ApplicationDbContext _dbContext;
        private readonly ILogger<TransactionFilterAttribute> _logger;

        public TransactionFilterAttribute(ApplicationDbContext dbContext, ILogger<TransactionFilterAttribute> logger)
        {
            _dbContext = dbContext;
            _logger = logger;
        }

        public override async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
        {
            if (HasManualTransactionSupport(context))
            {
                try
                {
                    await TryExecute(next);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, $"Failed manual transaction operation. \n" +
                                         $"Route Data: {GetActionRouteData(context)} \n" +
                                         $"Action Arguments: {GetActionArguments(context)}");
                    throw;
                }
            }
            else
            {
                var strategy = _dbContext.Database.CreateExecutionStrategy();
                await strategy.ExecuteAsync(async () =>
                {
                    await using var transaction = await _dbContext.Database.BeginTransactionAsync();
                    try
                    {
                        await TryExecute(next);
                        await transaction.CommitAsync();
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, $"Failed operation. Transaction rolling back \n" +
                                             $"Route Data: {GetActionRouteData(context)} \n" +
                                             $"Action Arguments: {GetActionArguments(context)}");
                        await transaction.RollbackAsync();
                        throw;
                    }
                });
            }
        }

        private async Task TryExecute(ActionExecutionDelegate next)
        {
            var result = await next();
            if (result.Exception is not null && !result.ExceptionHandled)
            {
                throw result.Exception;
            }
        }

        private string GetActionArguments(ActionExecutingContext context) 
            => JsonConvert.SerializeObject(context.ActionArguments);

        private string GetActionRouteData(ActionExecutingContext context)
             => JsonConvert.SerializeObject(new RouteValueDictionary(context.RouteData.Values));

        private bool HasManualTransactionSupport(FilterContext context)
            => context.Filters.Any(item => item is ManualTransactionFilterAttribute);
    }
}
