using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using RE.Core.Exceptions;
using RE.Core.Interfaces.Communication;
using RE.Core.Models.Communication;

namespace RE.Infrastructure.Communication
{
    internal class EmailSender : IEmailSender
    {
        private readonly IEmailProvider _emailProvider;
        private readonly ILogger<EmailSender> _logger;

        public EmailSender(
            IEmailProvider emailProvider, 
            ILogger<EmailSender> logger)
        {
            _emailProvider = emailProvider;
            _logger = logger;
        }

        public async Task<EmailResponse> SendEmailAsync(EmailMessage emailMessage)
        {
            try
            {
                var sendResult = await _emailProvider.SendAsync(emailMessage);
                if (!sendResult.Success)
                {
                    _logger.LogError(sendResult.Error);
                }
                
                return sendResult;
            }
            catch (Exception ex)
            {
                throw new SendEmailExeption(emailMessage.FromAddress, emailMessage.Subject, ex);
                throw;
            }
        }
    }
}