using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using Hangfire;
using Hangfire.Storage;
using Microsoft.EntityFrameworkCore;
using RE.Core.Business.Base.Handlers;
using RE.Core.Business.Jobs;
using RE.Core.Business.Queries.Requests.Settings;
using RE.Core.Business.Queries.Responses.Offers;
using RE.Core.Business.Queries.Responses.Settings;
using RE.Core.Extensions;
using RE.Core.Interfaces.Repository;
using RE.Core.Models.Inclusions;

namespace RE.Core.Business.Queries.Handlers.Settings
{
    public class GetSettingsQueryHandler : BaseHandler<GetSettingsQuery, SettingsViewModel>
    {
        private readonly IOfferRepository _offerRepo;
        private readonly IAlertRepository _alertRepo;
        private readonly Configuration.Settings _settings;
        private readonly IMapper _mapper;

        public GetSettingsQueryHandler(IOfferRepository offerRepo, IAlertRepository alertRepo, Configuration.Settings settings, IMapper mapper)
        {
            _offerRepo = offerRepo;
            _alertRepo = alertRepo;
            _settings = settings;
            _mapper = mapper;
        }

        public override async Task<SettingsViewModel> HandleRequest(GetSettingsQuery request, CancellationToken cancellationToken)
        {
            var settingsVm = _mapper.Map<SettingsViewModel>(_settings);
            settingsVm.JubRunning = FetchJobState();
            settingsVm.MissingCaptures = await FetchMissingCaptures(cancellationToken); 
            settingsVm.Websites = request.Items;
            settingsVm.AuthorizedAccess = request.AuthorizedAccess;

            return await Task.FromResult(settingsVm);
        }

        private bool FetchJobState()
        {
            using var connection = JobStorage.Current.GetConnection();
            var recurringJobs = connection.GetRecurringJobs();
            var job = recurringJobs.FirstOrDefault(p => p.Id.Equals(ScrapperJob.Name, StringComparison.InvariantCultureIgnoreCase));
            if (job is not null)
            {
                try
                {
                    var jobState = connection.GetStateData(job.LastJobId ?? job.Id);
                    return true;
                }
                catch
                {
                    //job has not been run by the scheduler yet, swallow error
                }
            }

            return false;
        }

        private async Task<int> FetchMissingCaptures(CancellationToken token)
        {
            var offers = await _offerRepo.Query(new OfferInclusions { IncludeWebsite = true, IncludeEvaluations = true }).ToListAsync(token);
            var offerDtos = _mapper.Map<IList<OfferDto>>(offers);
            return offerDtos.Count(o => !_settings.GetOfferFile(o).Exists);
        }
    }
}