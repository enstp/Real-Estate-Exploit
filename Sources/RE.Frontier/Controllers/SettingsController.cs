using System.Threading.Tasks;
using Hangfire;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using RE.Core.Business.Commands.Requests.Captures;
using RE.Core.Business.Commands.Requests.Settings;
using RE.Core.Business.Jobs;
using RE.Core.Business.Queries.Requests.Settings;
using RE.Core.Configuration;
using RE.Domain.Constants;
using RE.Frontier.Controllers.Base;
using RE.Frontier.Infrastructure.Filters;

namespace RE.Frontier.Controllers
{
    [Authorize(Policy = Policies.AuthorizedUser)]
    public class SettingsController : MvcController
    {
        private readonly Settings _settings;

        public SettingsController(Settings settings)
        {
            _settings = settings;
        }

        [ManualTransactionFilter]
        public async Task<IActionResult> Index()
        {
            var viewModel = await Mediator.Send(new GetSettingsQuery());
            return View(viewModel);
        }

        [ValidateAntiForgeryToken]
        [ManualTransactionFilter]
        public async Task<IActionResult> Update(UpdateSettingsCommand command)
        {
            if (ModelState.IsValid)
            {
                await Mediator.Send(command);
                if (command.Chrono != _settings.Chrono)
                    RecurringJob.AddOrUpdate<ScrapperJob>(ScrapperJob.Name, job => job.Enqueue(), command.Chrono);
                await Mediator.Send(new RefreshSettingsCommand());
            }

            return Json(new { Success = true });
        }

        [ManualTransactionFilter]
        public async Task<IActionResult> GenerateWebShotKey()
        {
            await Mediator.Send(new ClaimWebShotAccessCommand());
            return Redirect(nameof(Index));
        }

        public IActionResult StartJob()
        {
            RecurringJob.AddOrUpdate<ScrapperJob>(ScrapperJob.Name, job => job.Enqueue(), _settings.Chrono);
            RecurringJob.Trigger(ScrapperJob.Name);
            return Redirect(nameof(Index));
        }

        public IActionResult StopJob()
        {
            RecurringJob.RemoveIfExists(ScrapperJob.Name);
            return Redirect(nameof(Index));
        }

        [ManualTransactionFilter]
        public async Task<IActionResult> CaptureOffers()
        {
            await Mediator.Send(new TakeMissingScreenShotsCommand());
            return Redirect(nameof(Index));
        }
    }
}
