using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Flurl;
using MediatR;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using RE.Core.Business.Commands.Handlers.Jobs;
using RE.Core.Business.Commands.Requests.Emails;
using RE.Core.Business.Queries.Requests.Offers;
using RE.Core.Business.Queries.Responses.Offers;
using RE.Core.Configuration;
using RE.Core.Extensions;
using RE.Core.Interfaces.Communication;
using RE.Core.Models.Communication;
using RE.Domain.Enums;

namespace RE.Core.Business.Commands.Handlers.Emails
{
    public class SendReevaluatedOffersEmailCommandHandler : IRequestHandler<SendReevaluatedOffersEmailCommand>
    {
        private readonly IMediator _mediator;
        private readonly IEmailSender _emailSender;
        private readonly Configuration.Settings _settings;
        private readonly UrlSettings _urlSettings;
        private readonly ILogger<MonitorCommandHandler> _logger;

        public SendReevaluatedOffersEmailCommandHandler(
            IMediator mediator,
            IEmailSender emailSender,
            Configuration.Settings settings,
            IOptions<UrlSettings> urlSettings,
            ILogger<MonitorCommandHandler> logger)
        {
            _mediator = mediator;
            _emailSender = emailSender;
            _settings = settings;
            _urlSettings = urlSettings.Value;
            _logger = logger;
        }
        
        public async Task<Unit> Handle(SendReevaluatedOffersEmailCommand request, CancellationToken cancellationToken)
        {
            var offerCollection = await _mediator.Send(new GetSpecificOffersQuery { Ids = request.Ids }, cancellationToken);
            var offers = await offerCollection.ToListAsync(cancellationToken);

            await SendReevaluatedOffersEmail(offers, request.NotifiedEmail);
            _logger.LogInformation($"{offers.Count} offers change their prices. Email notification just sent!");

            return Unit.Value;
        }

        private async Task SendReevaluatedOffersEmail(List<OfferDto> offers, string email)
        {
            var emailMessage = new EmailMessage(new EmailContext())
            {
                FromAddress = "re.webqa@gmail.com",
                FromName = "Real Estate Notifier",
                Subject = "Offer prices changed!",
                Body = BuildEmailBody(offers),
                Attachments = BuildEmailAttachments(offers).ToList()
            };

            emailMessage.To.Add(email);

            await _emailSender.SendEmailAsync(emailMessage);
        }

        private string BuildEmailBody(List<OfferDto> offers)
        {
            var offersDeviations = string.Join(
                "<br />&emsp;", 
                offers.Select(o => 
                    @$"<a href=""{GetOfferUrl(o)}"">{o.Uid}</a> 
<img alt=""{o.Title}"" src=""cid:{o.Uid}"" width=""30"" height=""30"" style=""vertical-align: middle"">&nbsp;&nbsp;
- New price: <span style=""color: {(o.Trend == Trend.Ascending ? "red" : "green")}"">{$"{o.Price:0} €"}</span>. 
{(o.OldPrice.HasValue ? $"(old one: {o.OldPrice:0} €)" : "")}
Price trend: {o.Trend}. 
<a href=""{o.Url}"">Check it now!</a>"));
            return $@"Some offers changed prices. Check them bellow:<br />&emsp; {offersDeviations}";
        }

        private IEnumerable<EmailAttachment> BuildEmailAttachments(List<OfferDto> offers)
        {
            foreach (var offer in offers)
            {
                var offerFile = _settings.GetOfferFile(offer);
                if (!offerFile.Exists) continue;

                yield return new EmailAttachment
                {
                    ContentId = offer.Uid,
                    Filename = $"{offer.Title}.png",
                    Content =  offerFile.ToByteArray().ToBase64(),
                    Disposition = "inline"
                };
            }
        }

        private string GetOfferUrl(OfferDto offerDto)
        {
            var queryString = $"q={offerDto.Url}";
            var websiteUrl = Url.Combine(_urlSettings.ApplicationWebsiteBaseUrl, "Websites", offerDto.WebsiteId.ToString());
            return $"{websiteUrl}?{queryString}";
        }
    }
}