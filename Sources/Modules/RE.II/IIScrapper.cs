using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Flurl;
using HtmlAgilityPack;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using RE.Core.Configuration;
using RE.Core.Extensions;
using RE.Core.Interfaces.Services;
using RE.Core.Models.Scrapper;
using RE.Domain.Enums;

/*
 * https://interimobiliare.ro/apartamente-de-vanzare-iasi
 */

namespace RE.II
{
    public class IIScrapper : ScrapperModule
    {
        private readonly Settings _settings;

        public IIScrapper(IServiceProvider serviceProvider, Settings settings, ILogger<ScrapperModule> logger, string baseUrl)
            : base(serviceProvider, baseUrl, logger)
        {
            _settings = settings;
        }

        protected override QueryParameter GetSearchQueryParameter()
        {
            return new QueryParameter();
        }

        protected override List<Uri> GetOffersUris(QueryParameter queryParameter)
        {
            var offers = new List<string>();
            var pageNo = 1;
            var webSession = ServiceProvider.GetRequiredService<IWebSession>();

            while (offers.Count < _settings.OfferCount)
            {
                queryParameter["p"] = pageNo++.ToString();
                var pageUrl = $"{BaseUrl}{queryParameter}";

                var doc = webSession.Load(pageUrl, RequestType.Get);

                var offerLinks = doc.DocumentNode.Descendants("a").Where(x => x.ContainsAttributeWithValue("class", "absolut")).ToList();
                var offerUrls = offerLinks.Select(l => l.Attributes["href"].Value).ToList();
                var pristineUrls = offerUrls.Where(u => offers.All(o => o != u));
                pristineUrls = pristineUrls.Distinct().Select(u => Url.Combine(BaseUrl.Remove(BaseUrl.LastIndexOf("/")), u));

                offers.AddRange(pristineUrls);
            }

            return offers.Take(_settings.OfferCount).Select(o => new Uri(o)).ToList();
        }

        protected override string RetrieveSku(Uri offerUri)
        {
            return offerUri.AbsoluteUri.Substring(offerUri.AbsoluteUri.LastIndexOf("-") + 1);
        }

        protected override DateTimeOffset? RetrievePublishDate(HtmlDocument doc)
        {
            var timeStampLabel = doc.DocumentNode.Descendants("span").Last(x => x.ContainsAttributeWithValue("class", "dataOffer"));
            var rawTimeStamp = timeStampLabel.InnerText;
            var timeStamp = DateTimeOffset.ParseExact(rawTimeStamp, "dd MMMM yyyy", new CultureInfo("ro-RO"));
            return timeStamp;
        }

        protected override string RetrieveTitle(HtmlDocument doc)
        {
            var titleElem = doc.DocumentNode.Descendants("h1").First(x => x.ContainsAttributeWithValue("class", "offerTitle"));
            var title = titleElem.InnerText.Trim();
            return title;
        }

        protected override decimal RetrievePrice(HtmlDocument doc)
        {
            var priceLabel = doc.DocumentNode.Descendants("li").First(x => x.ContainsAttributeWithValue("class", "price"));
            var priceText = priceLabel.InnerText.Remove(priceLabel.InnerText.IndexOf("Euro")).Replace(".", string.Empty).Trim();
            return decimal.Parse(priceText);
        }

        protected override short RetrieveRooms(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("ul").First(x => x.ContainsAttributeWithContainsValue("class", "plusValoare")).Descendants("span");
            var roomsElem = detailsNamedElements.First(x => x.InnerText.Contains("Camere:")).NextSibling;
            return short.Parse(roomsElem.InnerText);
        }

        protected override short? RetrieveFloor(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("ul").First(x => x.ContainsAttributeWithContainsValue("class", "plusValoare")).Descendants("span");
            var floorElem = detailsNamedElements.First(x => x.InnerText.Contains("Etaj:")).NextSibling;
            var floorText = floorElem.InnerText.Remove(floorElem.InnerText.IndexOf(" "));
            return floorText switch
            {
                "parter" => 0,
                _ => floorText.Convert<short?>()
            };
        }

        protected override string RetrieveYear(HtmlDocument doc)
        {
            var secondDetailsNamedElements = doc.DocumentNode.Descendants("div").First(x => x.ContainsAttributeWithValue("class", "detalii")).Descendants("span");
            var yearElem = secondDetailsNamedElements.FirstOrDefault(x => x.InnerText.Contains("An constructie:"))?.NextSibling;
            return yearElem?.InnerText;
        }

        protected override string RetrievePartitioning(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("ul").First(x => x.ContainsAttributeWithContainsValue("class", "plusValoare")).Descendants("span");
            var partitionElem = detailsNamedElements.First(x => x.InnerText.Contains("Tip:")).NextSibling;
            return partitionElem?.InnerText is not null 
                ? CultureInfo.CurrentCulture.TextInfo.ToTitleCase(partitionElem?.InnerText)
                : null;
        }

        protected override int? RetrieveUsableArea(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("ul").First(x => x.ContainsAttributeWithContainsValue("class", "plusValoare")).Descendants("span");
            var usableAreaElem = detailsNamedElements.First(x => x.InnerText.Contains("Suprafata:")).NextSibling;
            var usableAreaText = usableAreaElem.InnerText.Replace("m", string.Empty).Trim();
            return int.Parse(usableAreaText);
        }

        protected override int? RetrieveTotalArea(HtmlDocument doc)
        {
            return default;
        }
    }
}