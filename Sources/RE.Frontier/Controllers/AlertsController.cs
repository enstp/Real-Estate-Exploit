using System.Threading.Tasks;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using RE.Core.Business.Commands.Requests.Alerts;
using RE.Core.Business.Queries.Requests.Alerts;
using RE.Core.Business.Queries.Responses.Alerts;
using RE.Domain.Constants;
using RE.Frontier.Controllers.Base;
using RE.Frontier.Infrastructure.Filters;

namespace RE.Frontier.Controllers
{
    [Authorize(Policy = Policies.AuthorizedUser)]
    public class AlertsController : MvcController
    {
        private readonly IMapper _mapper;

        public AlertsController(IMapper mapper)
        {
            _mapper = mapper;
        }

        [ManualTransactionFilter]
        public async Task<IActionResult> Index()
        {
            var viewModel = await Mediator.Send(new GetAlertsQuery());
            return View(viewModel);
        }

        [ManualTransactionFilter]
        public IActionResult Add()
        {
            var alert = new AlertDto();
            return View(alert);
        }

        [ManualTransactionFilter]
        public async Task<IActionResult> Edit(int id)
        {
            var alert = await Mediator.Send(new GetAlertQuery { Id = id });
            return View(alert);
        }

        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(CreateAlertCommand command)
        {
            if (ModelState.IsValid)
            {
                await Mediator.Send(command);
                return Json(new { Success = true });
            }

            return View("Add", _mapper.Map<AlertDto>(command));
        }

        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Update(int id, UpdateAlertCommand command)
        {
            if (ModelState.IsValid)
            {
                await Mediator.Send(command);
                return Json(new { Success = true });
            }

            return View("Edit", _mapper.Map<AlertDto>(command));
        }

        public async Task<IActionResult> Delete(int id)
        {
            await Mediator.Send(new DeleteAlertCommand { Id = id });
            return Json(new { Success = true });
        }
    }
}
