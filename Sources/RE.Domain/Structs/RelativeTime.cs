using System;

namespace RE.Domain.Structs
{
    public readonly struct RelativeTime
    {
        private const int SECOND = 1;
        private const int MINUTE = 60 * SECOND;
        private const int HOUR = 60 * MINUTE;
        private const int DAY = 24 * HOUR;
        private const int MONTH = 30 * DAY;

        private readonly TimeSpan _value;
        private readonly double _delta;

        public RelativeTime(DateTimeOffset dateTime)
        {
            _value = new TimeSpan(DateTime.UtcNow.Ticks - dateTime.Ticks);
            _delta = Math.Abs(_value.TotalSeconds);
        }

        public override string ToString()
        {
            return ComputeTime();
        }

        private string ComputeTime()
        {
            if (_delta < 1 * MINUTE)
                return _value.Seconds == 1 ? "one second ago" : $"{_value.Seconds} seconds ago";

            if (_delta < 2 * MINUTE)
                return "a minute ago";

            if (_delta < 45 * MINUTE)
                return $"{_value.Minutes} minutes ago";

            if (_delta < 90 * MINUTE)
                return "an hour ago";

            if (_delta < 24 * HOUR)
                return $"{_value.Hours} hours ago";

            if (_delta < 48 * HOUR)
                return "yesterday";

            if (_delta < 30 * DAY)
                return $"{_value.Days} days ago";

            if (_delta < 12 * MONTH)
            {
                var months = Convert.ToInt32(Math.Floor((double)_value.Days / 30));
                return months <= 1 ? "one month ago" : $"{months} months ago";
            }
            else
            {
                var years = Convert.ToInt32(Math.Floor((double)_value.Days / 365));
                return years <= 1 ? "one year ago" : $"{years} years ago";
            }
        }
    }
}
