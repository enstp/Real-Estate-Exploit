using System;
using System.Threading;
using System.Threading.Tasks;
using MediatR;
using RE.Core.Business.Commands.Requests.Offers;
using RE.Core.Exceptions;
using RE.Core.Interfaces.Repository;
using RE.Core.Interfaces.Services;
using RE.Domain.Entities;
using RE.Domain.ValueObjects;

namespace RE.Core.Business.Commands.Handlers.Offers
{
    public class UpdateOfferCommandHandler : IRequestHandler<UpdateOfferCommand>
    {
        private readonly IOfferRepository _oferRepo;
        private readonly IDateTimeService _dateTimeService;

        public UpdateOfferCommandHandler(IOfferRepository oferRepo, IDateTimeService dateTimeService)
        {
            _oferRepo = oferRepo;
            _dateTimeService = dateTimeService;
        }

        public async Task<Unit> Handle(UpdateOfferCommand request, CancellationToken cancellationToken)
        {
            var entity = await _oferRepo.Get(request.Id, cancellationToken);
            if (entity is null)
            {
                throw new NotFoundException(nameof(Offer), request.Id);
            }
            
            entity.ExpiredAt = request.Active ? (DateTime?)null : (entity.ExpiredAt ?? _dateTimeService.Now.Date);
            entity.Title = request.Title;
            entity.Rooms = request.Rooms;
            entity.Floor = request.Floor;
            entity.Year = request.Year;
            entity.Partitioning = request.Partitioning;
            entity.Area = Area.For(request.UsableArea, request.TotalArea);

            await _oferRepo.Update(entity, cancellationToken);

            return Unit.Value;
        }
    }
}