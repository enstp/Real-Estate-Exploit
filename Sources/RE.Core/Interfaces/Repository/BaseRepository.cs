using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using RE.Domain.Entities.Base;

namespace RE.Core.Interfaces.Repository
{
    public abstract class BaseRepository<TEntity, TContext> : IRepository<TEntity>
        where TEntity : Entity<int>
        where TContext : IApplicationDbContext
    {
        protected readonly TContext Context;

        protected BaseRepository(TContext context) => Context = context;

        public IQueryable<TEntity> Query()
        {
            return Context.Set<TEntity>();
        }

        public async Task<TEntity> Get(int id, CancellationToken cancellation = default)
        {
            return await Context.Set<TEntity>().FindAsync(new object[] { id }, cancellation);
        }

        public async Task<TEntity> Get(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellation = default)
        {
            return await Context.Set<TEntity>().FirstOrDefaultAsync(predicate, cancellation);
        }

        public async Task<TEntity> Add(TEntity entity, CancellationToken cancellation = default)
        {
            Context.Set<TEntity>().Add(entity);
            await Context.SaveChangesAsync(cancellation);
            return entity;
        }

        public async Task<TEntity> Update(TEntity entity, CancellationToken cancellation = default)
        {
            Context.Set<TEntity>().Update(entity);
            await Context.SaveChangesAsync(cancellation);
            return entity;
        }

        public async Task<int> Delete(int id, CancellationToken cancellation = default)
        {
            var entity = await Context.Set<TEntity>().FindAsync(id, cancellation);
            if (entity is not null)
            {
                return await Delete(entity, cancellation);
            }

            return 0;
        }

        public async Task<int> Delete(TEntity entity, CancellationToken cancellation = default)
        {
            Context.Set<TEntity>().Remove(entity);
            return await Context.SaveChangesAsync(cancellation);
        }

        public async Task<int> Delete(ICollection<TEntity> entities, CancellationToken cancellation = default)
        {
            Context.Set<TEntity>().RemoveRange(entities);
            return await Context.SaveChangesAsync(cancellation);
        }
    }
}