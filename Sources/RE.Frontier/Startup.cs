using System;
using FluentValidation.AspNetCore;
using Hangfire;
using Hangfire.SqlServer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.FileProviders;
using Microsoft.Extensions.Hosting;
using Newtonsoft.Json;
using RE.Core;
using RE.Core.Business.Base.Requests;
using RE.Core.Business.Jobs;
using RE.Core.Configuration;
using RE.Core.Extensions;
using RE.Domain.Constants;
using RE.Frontier.Infrastructure.Builders;
using RE.Frontier.Infrastructure.Factories;
using RE.Frontier.Infrastructure.FilterAttributes;
using RE.Frontier.Infrastructure.Filters;
using RE.Frontier.Infrastructure.Requirements;
using RE.Infrastructure;
using Serilog;

namespace RE.Frontier
{
    public class Startup
    {
        public Startup(IWebHostEnvironment environment)
        {
            Environment = environment;
            Configuration = Configuration = EnvironmentConfigurationBuilder.Build(environment);
        }

        public IWebHostEnvironment Environment { get; }

        public IConfigurationRoot Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddApplication(Configuration);
            services.AddInfrastructure(Configuration);

            // Suppress 'X-Frame-Options' to 'sameorigin'
            services.AddAntiforgery(o => o.SuppressXFrameOptionsHeader = true);

            // Enable use of IHttpContextAccessor anywhere in the application
            services.AddHttpContextAccessor();

            // Add Hangfire services.
            services.AddHangfire((provider, configuration) => configuration
                .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)
                .UseSimpleAssemblyNameTypeSerializer()
                .UseRecommendedSerializerSettings()
                .UseSqlServerStorage(Configuration.GetConnectionString("DefaultConnection"), new SqlServerStorageOptions
                {
                    CommandBatchMaxTimeout = TimeSpan.FromMinutes(5),
                    SlidingInvisibilityTimeout = TimeSpan.FromMinutes(5),
                    QueuePollInterval = TimeSpan.Zero,
                    UseRecommendedIsolationLevel = true,
                    DisableGlobalLocks = true
                })
                .UseFilter(new JobLoggerFilterAttribute()));

            // Add the processing server as IHostedService
            services.AddHangfireServer();

            services.AddControllersWithViews(options =>
                {
                    options.Filters.Add(new ApiExceptionFilter());
                    options.Filters.Add(new TransactionFilterFactory());
                })
                .AddRazorRuntimeCompilation()
                .AddNewtonsoftJson(options =>
                {
                    options.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;
                    options.SerializerSettings.MaxDepth = 3;
                })
                .AddFluentValidation(fv => fv.RegisterValidatorsFromAssemblyContaining<BaseRequest>());

            services.AddScoped<IAuthorizationHandler, AuthorizationHandler>();
            services.AddAuthorization(options =>
            {
                options.AddPolicy(Policies.AuthorizedUser, policy =>
                    policy.Requirements.Add(new AuthorizationRequirement()));
            });

            services.AddDirectoryBrowser();
        }

        public void Configure(
            IApplicationBuilder app, 
            IBackgroundJobClient backgroundJobs, 
            IWebHostEnvironment env,
            IHostApplicationLifetime lifetime,
            IServiceProvider serviceProvider,
            Settings settings)
        {
            // Configure Hangfire to use the new JobActivator we defined
            GlobalConfiguration.Configuration.UseActivator(new ContainerJobActivator(serviceProvider));

            lifetime.ApplicationStarted.Register(() =>
            {
                // Reschedule Offer cleaner job
                RecurringJob.RemoveIfExists(MonitorJob.Name);
                RecurringJob.AddOrUpdate<MonitorJob>(MonitorJob.Name, job => job.Enqueue(), Cron.Daily);
            });

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }
            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseSerilogRequestLogging(); 

            app.UseHangfireDashboard("/hangfire", new DashboardOptions
            {
                Authorization = new[] { new DashboardAuthorizationFilter() }
            });
            backgroundJobs.Enqueue(() => Console.WriteLine("Hello world from Hangfire!"));

            app.UseRouting();
            app.UseAuthorization();
            app.UseFileServer(ConfigureFileServer(settings));
            app.UseEndpoints(ConfigureEndpoints);
        }

        private FileServerOptions ConfigureFileServer(Settings settings)
        {
            return new FileServerOptions
            {
                FileProvider = new PhysicalFileProvider(settings.ScreenShotsDirectory),
                RequestPath = settings.GetScreenShotsEndpoint(),
                EnableDirectoryBrowsing = true,
            };
        }

        private void ConfigureEndpoints(IEndpointRouteBuilder endpoints)
        {
            endpoints.MapControllerRoute(
                name: "default",
                pattern: "{controller=Home}/{action=Index}/{id?}");

            endpoints.MapHangfireDashboard();
        }
    }
}
