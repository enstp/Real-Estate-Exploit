using System;
using System.Collections.Generic;
using System.Linq;
using HtmlAgilityPack;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using RE.Core.Configuration;
using RE.Core.Extensions;
using RE.Core.Interfaces.Services;
using RE.Core.Models.Scrapper;
using RE.Domain.Enums;

/*
 * https://www.gladiatorimobiliare.ro/vanzari-apartamente-iasi-cu-minim-3-camere-32423
 */

namespace RE.GI
{
    public class GIScrapper : ScrapperModule
    {
        private readonly Settings _settings;

        public GIScrapper(IServiceProvider serviceProvider, Settings settings, ILogger<ScrapperModule> logger, string baseUrl)
            : base(serviceProvider, baseUrl, logger)
        {
            _settings = settings;
        }

        protected override QueryParameter GetSearchQueryParameter()
        {
            return new();
        }

        protected override List<Uri> GetOffersUris(QueryParameter queryParameter)
        {
            var offers = new List<string>();
            var pageNo = 1;
            var webSession = ServiceProvider.GetRequiredService<IWebSession>();

            while (offers.Count < _settings.OfferCount)
            {
                var pageUrl = $"{BaseUrl}-{pageNo++}";

                var doc = webSession.Load(pageUrl, RequestType.Get);

                var offerLinks = doc.DocumentNode.Descendants("a").Where(x => x.ContainsAttributeStartsWithValue("class", "anunt")).ToList();
                var offerUrls = offerLinks.Select(l => l.Attributes["href"].Value).ToList();
                var pristineUrls = offerUrls.Distinct().Where(u => offers.All(o => o != u));

                offers.AddRange(pristineUrls);
            }

            return offers.Take(_settings.OfferCount).Select(o => new Uri(o)).ToList();
        }

        protected override string RetrieveSku(Uri offerUri)
        {
            return offerUri.AbsoluteUri.Substring(offerUri.AbsoluteUri.LastIndexOf("-") + 1);
        }

        protected override DateTimeOffset? RetrievePublishDate(HtmlDocument doc)
        {
            return default;
        }

        protected override string RetrieveTitle(HtmlDocument doc)
        {
            var titleContainer = doc.DocumentNode.Descendants("div").First(x => x.ContainsAttributeWithValue("class", "listing"));
            var titleElem = titleContainer.Descendants("h1").First();
            var title = titleElem.InnerText.Trim();
            return title;
        }

        protected override decimal RetrievePrice(HtmlDocument doc)
        {
            var priceLabel = doc.DocumentNode.Descendants("h2").First(x => x.ContainsAttributeWithValue("class", "colorat smaller"));
            var priceText = priceLabel.FirstChild.InnerText.Trim().Replace(".", string.Empty);
            return decimal.Parse(priceText);
        }

        protected override short RetrieveRooms(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("span").Where(x => x.ContainsAttributeWithValue("class", "nume-detaliu"));
            var roomsName = detailsNamedElements.First(x => x.InnerText.Contains("Nr. camere"));
            var roomsElem = roomsName.ParentNode.Descendants("span").First(x => x.ContainsAttributeWithValue("class", "valoare-detaliu"));
            var roomsText = roomsElem.InnerText.Trim();
            return short.Parse(roomsText);
        }

        protected override short? RetrieveFloor(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("span").Where(x => x.ContainsAttributeWithValue("class", "nume-detaliu"));
            var floorName = detailsNamedElements.First(x => x.InnerText.Contains("Etaj"));
            var floorElem = floorName.ParentNode.Descendants("span").First(x => x.ContainsAttributeWithValue("class", "valoare-detaliu"));
            var floorText = floorElem.InnerText;
            floorText = floorText.IndexOf("/") > -1 ? floorText.Remove(floorText.IndexOf("/")) : floorText;
            floorText = floorText.IndexOf("-") > -1 ? floorText.Remove(floorText.IndexOf("-")) : floorText;
            floorText = floorText == "P" ? "0" : GetValueOrDefault(floorText, null);
            var specialFloors = new List<string> { "Mez" };
            return floorText switch
            {
                var f when specialFloors.Contains(f) => (short?)null,
                "P" => 0,
                "D" => -1,
                _ => floorText.Convert<short?>()
            };
        }

        protected override string RetrieveYear(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("span").Where(x => x.ContainsAttributeWithValue("class", "nume-detaliu"));
            var yearName = detailsNamedElements.First(x => x.InnerText.Contains("An construcție"));
            var yearElem = yearName.ParentNode.Descendants("span").First(x => x.ContainsAttributeWithValue("class", "valoare-detaliu"));
            return GetValueOrDefault(yearElem.InnerText, null);
        }

        protected override string RetrievePartitioning(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("span").Where(x => x.ContainsAttributeWithValue("class", "nume-detaliu"));
            var partitioningName = detailsNamedElements.First(x => x.InnerText.Contains("Compartimentare"));
            var partitioningElem = partitioningName.ParentNode.Descendants("span").First(x => x.ContainsAttributeWithValue("class", "valoare-detaliu"));
            var partitioningText = partitioningElem.InnerText.Trim().Replace("-", string.Empty);
            return GetValueOrDefault(partitioningText, null);
        }

        protected override int? RetrieveUsableArea(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("span").Where(x => x.ContainsAttributeWithValue("class", "nume-detaliu"));
            var usableAreaName = detailsNamedElements.First(x => x.InnerText.Contains("Suprafaţă utilă"));
            var usableAreaElem = usableAreaName.ParentNode.Descendants("span").First(x => x.ContainsAttributeWithValue("class", "valoare-detaliu"));
            var usableAreaText = usableAreaElem.InnerText.Replace("mp", string.Empty).Trim();
            double.TryParse(usableAreaText, out var usableArea);
            return usableArea == 0 ? (int?) null : Convert.ToInt32(usableArea);
        }

        protected override int? RetrieveTotalArea(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("span").Where(x => x.ContainsAttributeWithValue("class", "nume-detaliu"));
            var totalAreaName = detailsNamedElements.First(x => x.InnerText.Contains("Suprafaţă construită"));
            var totalAreaElem = totalAreaName.ParentNode.Descendants("span").First(x => x.ContainsAttributeWithValue("class", "valoare-detaliu"));
            var totalAreaText = totalAreaElem.InnerText.Replace("mp", string.Empty).Trim();
            double.TryParse(totalAreaText, out var totalArea);
            return totalArea == 0 ? (int?) null : Convert.ToInt32(totalArea);
        }

        private string GetValueOrDefault(string str, string defaultValue)
        {
            return str.Trim() == "-" ? defaultValue : str.Trim();
        }
    }
}