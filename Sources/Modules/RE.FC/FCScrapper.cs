using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Flurl;
using HtmlAgilityPack;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using RE.Core.Configuration;
using RE.Core.Extensions;
using RE.Core.Interfaces.Services;
using RE.Core.Models.Scrapper;
using RE.Domain.Enums;

/*
 * https://www.fideliacasa.ro/apartamente-iasi.html
 */

namespace RE.FC
{
    public class FCScrapper : ScrapperModule
    {
        private readonly Settings _settings;
        private readonly string _baseDomain;

        public FCScrapper(IServiceProvider serviceProvider, Settings settings, ILogger<ScrapperModule> logger, string baseUrl)
            : base(serviceProvider, baseUrl, logger)
        {
            _settings = settings;
            _baseDomain = $"{new Uri(BaseUrl).Scheme}://{new Uri(BaseUrl).Host}";
        }

        protected override QueryParameter GetSearchQueryParameter()
        {
            return new();
        }

        protected override List<Uri> GetOffersUris(QueryParameter queryParameter)
        {
            var offers = new List<string>();
            var pageNo = 1;
            var webSession = ServiceProvider.GetRequiredService<IWebSession>();

            while (offers.Count < _settings.OfferCount)
            {
                var pageUrl = Url.Combine(_baseDomain, $"apartamente-iasi-{pageNo++}.html");
                var doc = webSession.Load(pageUrl, RequestType.Get);

                var offerWrapper = doc.DocumentNode.SelectSingleNode("//div[contains(@class, 'properties-wrapper')]");
                var offerTitles = offerWrapper.SelectNodes(".//h2[@class='property-title']").ToList();
                var offerLinks = offerTitles.Select(o => o.SelectSingleNode(".//a")).ToList();
                var offerUrls = offerLinks.Select(l => l.Attributes["href"].Value).ToList();
                var pristineUrls = offerUrls.Distinct().Where(u => offers.All(o => o != u)).ToList();

                offers.AddRange(pristineUrls);
            }

            return offers.Take(_settings.OfferCount).Select(o => new Uri(o)).ToList();
        }

        protected override string RetrieveSku(Uri offerUri)
        {
            return offerUri.AbsoluteUri.Remove(offerUri.AbsoluteUri.IndexOf(".html")).Substring(offerUri.AbsoluteUri.LastIndexOf("-") + 1);
        }

        protected override DateTimeOffset? RetrievePublishDate(HtmlDocument doc)
        {
            var publishTimeStamp = doc.DocumentNode.Descendants("span").First(x => x.ContainsAttributeWithContainsValue("class", "actualizat-data"));
            var rawTimeStamp = publishTimeStamp.InnerText.HtmlDecode().Replace("Actualizat la:", string.Empty);
            rawTimeStamp = rawTimeStamp.Remove(rawTimeStamp.IndexOf("/")).Trim();
            var timeStamp = DateTimeOffset.ParseExact(rawTimeStamp, "d MMMM yyyy", new CultureInfo("ro-RO"));
            return timeStamp;
        }

        protected override string RetrieveTitle(HtmlDocument doc)
        {
            var titleContainer = doc.DocumentNode.Descendants("div").First(x => x.ContainsAttributeWithValue("class", "section-title-oferta"));
            var titleElem = titleContainer.Descendants("h1").First();
            var title = titleElem.InnerText.Trim();
            return title;
        }

        protected override decimal RetrievePrice(HtmlDocument doc)
        {
            var priceContainer = doc.DocumentNode.Descendants("div").First(x => x.ContainsAttributeWithValue("class", "property-price"));
            var priceText = priceContainer.Descendants("span").First().InnerText.Replace(".", string.Empty);
            return decimal.Parse(priceText);
        }

        protected override short RetrieveRooms(HtmlDocument doc)
        {
            var roomsNoLabel = doc.DocumentNode.Descendants("div").First(x => x.InnerText == "Numar camere:");
            var roomsNoElem = roomsNoLabel.NextSibling;
            var roomsNoStr = roomsNoElem.InnerText;
            return short.Parse(roomsNoStr);
        }

        protected override short? RetrieveFloor(HtmlDocument doc)
        {
            var floorLabel = doc.DocumentNode.Descendants("div").First(x => x.InnerText == "Etaj:");
            var floorElem = floorLabel.NextSibling;
            var floorStr = floorElem.InnerText;
            var specialFloors = new List<string> { "Intermediar", "Penthouse", "Mansarda", "Ultimele 2 etaje", "Parter peste garaje" };
            return floorStr switch
            {
                var f when specialFloors.Contains(f) => (short?)null,
                "Parter" => 0,
                "Demisol" => -1,
                _ => floorStr.Convert<short?>()
            };
        }

        protected override string RetrieveYear(HtmlDocument doc)
        {
            var yearLabel = doc.DocumentNode.Descendants("div").FirstOrDefault(x => x.InnerText == "Anul constructiei:");
            var yearElem = yearLabel?.NextSibling;
            return yearElem?.InnerText;
        }

        protected override string RetrievePartitioning(HtmlDocument doc)
        {
            var partitioningLabel = doc.DocumentNode.Descendants("div").FirstOrDefault(x => x.InnerText == "Compartimentare:");
            var partitioningElem = partitioningLabel?.NextSibling;
            return partitioningElem?.InnerText;
        }

        protected override int? RetrieveUsableArea(HtmlDocument doc)
        {
            var usableAreaLabel = doc.DocumentNode.Descendants("div").FirstOrDefault(x => x.InnerText == "Suprafata utila:");
            var usableAreaElem = usableAreaLabel?.NextSibling;
            var usableArea = usableAreaElem?.InnerText.Replace("mp", string.Empty).Trim();
            return usableArea is not null
                ? (int)Math.Round(usableArea.Convert<double>())
                : (int?)null;
        }

        protected override int? RetrieveTotalArea(HtmlDocument doc)
        {
            var totalAreaLabel = doc.DocumentNode.Descendants("div").FirstOrDefault(x => x.InnerText == "Suprafata totala:");
            var totalAreaElem = totalAreaLabel?.NextSibling;
            var totalArea = totalAreaElem?.InnerText.Replace("mp", string.Empty).Trim();
            return totalArea is not null
                ? (int)Math.Round(totalArea.Convert<double>())
                : (int?)null;
        }
    }
}