using System.Drawing;
using System.Threading.Tasks;
using Flurl;
using Microsoft.Extensions.Logging;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using RE.Core.Builders;
using RE.Core.Exceptions;
using RE.Core.Extensions;
using RE.Core.Interfaces.Services;

namespace RE.Infrastructure.Services
{
    public class WebShotAccessBuilder : IWebShotAccessBuilder
    {
        private readonly IWebDriver _webDriver;
        private readonly ICaptchaSolver _captchaSolver;
        private readonly ILogger<WebShotAccessBuilder> _logger;
        
        private readonly Url _baseAddress = new Url("https://www.screenshotmachine.com/");
        private readonly Url _registerAddress;

        public WebShotAccessBuilder(ICaptchaSolver captchaSolver, IWebDriver webDriver, ILogger<WebShotAccessBuilder> logger)
        {
            _captchaSolver = captchaSolver;
            _webDriver = webDriver;
            _logger = logger;

            _registerAddress = Url.Combine(_baseAddress, "register.php");
        }

        public async Task<IWebShotAccessBuilder> GenerateFakeUser(string email, string password)
        {
            _webDriver.Navigate().GoToUrl(_registerAddress);
            
            var emailElem = FindElement(By.Name("email"));
            emailElem.SendKeys(email);

            var passElem = FindElement(By.Name("password"));
            passElem.SendKeys(password);

            var confirmPassElem = FindElement(By.Name("confirmPassword"));
            confirmPassElem.SendKeys(password);

            await new RetryPolicyActionBuilder()
                .WithExceptionType(typeof(InvalidCaptchaException))
                .WithExceptionMessage(_logger, "Generate Fake User Command - the generated captcha code is invalid.")
                .BuildAndExecute(async () => await SubmitRegisterForm());

            return this;
        }

        public string GetAccessKey()
        {
            var apikeyElem = FindElement(By.XPath(@"//*[@id=""apiCall""]/div/b[2]"));
            var apiKey = apikeyElem.Text;
            return apiKey;
        }

        private byte[] TakeElementShot(IWebElement element)
        {
            var sc = ((ITakesScreenshot)_webDriver).GetScreenshot();
            var img = sc.AsByteArray.ToBitmap();
            var clonedImg = img.Clone(new Rectangle(element.Location, element.Size), img.PixelFormat);
            return clonedImg.ToByteArray();
        }

        public void Dispose()
        {
            _webDriver?.Quit();
            _webDriver?.Dispose();
        }

        private async Task SubmitRegisterForm()
        {
            var captchaImgElem = FindElement(By.ClassName("captcha_pic"));
            var captchaImg = TakeElementShot(captchaImgElem);
            var result = _captchaSolver.Solve(captchaImg).ToUpper();
            var captchaElem = FindElement(By.Name("captcha"));
            captchaElem.SendKeys(result);

            var agreeElem = FindElement(By.ClassName("custom-control-label"));
            new Actions(_webDriver).MoveToElement(agreeElem).MoveByOffset(-100, 0).Click().Perform();

            var submitElem = FindElement(By.Name("submit"));
            submitElem.Click();

            await Task.Delay(1000);

            var alertPresent = FindElement(By.ClassName("alert-danger")) is not null;
                throw new InvalidCaptchaException(result);
        }

        private IWebElement FindElement(By by) => _webDriver.LocateElement(by);
    }
}
