using System;
using System.Collections.Generic;
using System.Linq;
using AutoMapper;
using RE.Core.Business.Queries.Responses.Evaluations;
using RE.Core.Exceptions;
using RE.Domain.Entities;
using RE.Core.Business.Queries.Responses.Offers;
using RE.Core.Extensions;
using RE.Core.Models;

namespace RE.Core.Mappings.Converters
{
    public class OfferToOfferSummaryConverter : ITypeConverter<Offer, OfferSummary>
    {
        private readonly IMapper _mapper;

        public OfferToOfferSummaryConverter(IMapper mapper)
        {
            _mapper = mapper;
        }

        public OfferSummary Convert(Offer source, OfferSummary destination, ResolutionContext context)
        {
            destination ??= new OfferSummary();

            try
            {
                var offer = _mapper.Map<OfferDto>(source);
                var evaluations = _mapper.Map<IList<EvaluationDto>>(source.Evaluations);

                destination.Offer = offer;
                destination.Evaluations = evaluations;
                destination.Evolution = ComputePriceEvolution(evaluations).ToList();
            }
            catch (Exception ex)
            {
                throw new InvalidOfferException(source.Id, ex);
            }

            return destination;
        }

        private IEnumerable<DayPrice> ComputePriceEvolution(IList<EvaluationDto> evaluations)
        {
            foreach (var evaluation in evaluations)
            {
                foreach (var day in DateExtensions.EachDay(evaluation.AvailableFrom, evaluation.AvailableTo))
                {
                    yield return new DayPrice(day, evaluation.Amount);
                }
            }
        }
    }
}