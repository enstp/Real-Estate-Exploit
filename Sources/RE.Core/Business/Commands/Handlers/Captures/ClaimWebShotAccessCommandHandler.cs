using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using MediatR;
using Microsoft.Extensions.Logging;
using RE.Core.Business.Commands.Handlers.Jobs;
using RE.Core.Business.Commands.Requests.Captures;
using RE.Core.Business.Commands.Requests.Settings;
using RE.Core.Interfaces.Services;
using RE.Domain.Constants;

namespace RE.Core.Business.Commands.Handlers.Captures
{
    public class ClaimWebShotAccessCommandHandler : IRequestHandler<ClaimWebShotAccessCommand>
    {
        private readonly IWebShotAccessBuilder _webShotAccessBuilder;
        private readonly IEmailGenerator _emailGenerator;
        private readonly IMapper _mapper;
        private readonly IMediator _mediator;
        private readonly Configuration.Settings _settings;
        private readonly ILogger<MonitorCommandHandler> _logger;

        public ClaimWebShotAccessCommandHandler(
            IWebShotAccessBuilder webShotAccessBuilder, 
            IEmailGenerator emailGenerator,
            IMapper mapper,
            IMediator mediator,
            Configuration.Settings settings,
            ILogger<MonitorCommandHandler> logger)
        {
            _webShotAccessBuilder = webShotAccessBuilder;
            _emailGenerator = emailGenerator;
            _mapper = mapper;
            _mediator = mediator;
            _settings = settings;
            _logger = logger;
        }

        public async Task<Unit> Handle(ClaimWebShotAccessCommand request, CancellationToken cancellationToken)
        {
            var newAccessKey = await ProvideAccessKey();
            var command = _mapper.Map<UpdateSettingsCommand>(_settings);
            command.ScreenShotMachineApiKey = newAccessKey;

            await _mediator.Send(command, cancellationToken);
            await _mediator.Send(new RefreshSettingsCommand(), cancellationToken);

            _logger.LogInformation($"A new Access key was assigned for WebShot Api Key: {newAccessKey}");

            return Unit.Value;
        }

        private async Task<string> ProvideAccessKey()
        {
            var fakeEmail = _emailGenerator.GenerateEmail(Domains.Google);
            var fakePas = _emailGenerator.GeneratePassword();
            using var webShotAccessBuilder = await _webShotAccessBuilder.GenerateFakeUser(fakeEmail, fakePas);
            return webShotAccessBuilder.GetAccessKey();
        }
    }
}