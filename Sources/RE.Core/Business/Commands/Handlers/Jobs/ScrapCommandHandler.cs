using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using MediatR;
using RE.Core.Business.Commands.Requests.Captures;
using RE.Core.Business.Commands.Requests.Emails;
using RE.Core.Business.Commands.Requests.Jobs;
using RE.Core.Interfaces;
using RE.Core.Interfaces.Services;

namespace RE.Core.Business.Commands.Handlers.Jobs
{
    public class ScrapCommandHandler : IRequestHandler<ScrapCommand, bool>
    {
        private readonly IMediator _mediator;
        private readonly IScrapperService _scrapperService;
        private readonly IOfferSyncronizer _offerSyncronizer;

        public ScrapCommandHandler(
            IMediator mediator,
            IApplicationDbContext dbContext,
            IScrapperService scrapperService, 
            IOfferSyncronizer offerSyncronizer)
        {
            _mediator = mediator;
            _scrapperService = scrapperService;
            _offerSyncronizer = offerSyncronizer;
        }
        
        public async Task<bool> Handle(ScrapCommand request, CancellationToken cancellationToken)
        {
            var offers = await _scrapperService.ScrapOffers(cancellationToken);
            var freshOffers = await _offerSyncronizer.Sync(offers, cancellationToken);
            if (freshOffers.Any())
            {
                var freshOfferIds = freshOffers.Select(o => o.Id).ToList();
                await _mediator.Send(new TakeScreenShotsCommand { Ids = freshOfferIds }, cancellationToken);
                await _mediator.Send(new SendFreshOffersEmailCommand { Ids = freshOfferIds }, cancellationToken);
            }

            return true;
        }
    }
}