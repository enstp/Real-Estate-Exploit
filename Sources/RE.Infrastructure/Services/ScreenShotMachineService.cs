using System;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using MediatR;
using RE.Core.Business.Commands.Requests.Settings;
using RE.Core.Configuration;
using RE.Core.Exceptions;
using RE.Core.Interfaces.Services;
using RE.Infrastructure.HttpClients;

namespace RE.Infrastructure.Services
{
    public class ScreenShotMachineService : IWebshotService
    {
        private const int MissingScreenShotSizeThreshold = 100000;

        private readonly WebShotClient _webShotClient;
        private readonly IMediator _mediator;
        private readonly IMapper _mapper;
        private readonly Settings _settings;

        public ScreenShotMachineService(WebShotClient webShotClient, IMediator mediator, IMapper mapper, Settings settings)
        {
            _webShotClient = webShotClient;
            _mediator = mediator;
            _mapper = mapper;
            _settings = settings;
        }

        public async Task<byte[]> TakeShot(Uri uri, CancellationToken cancellationToken)
        {
            var imageArray = await _webShotClient.TakeSnapShot(uri, cancellationToken);
            if (!Qualifies(imageArray))
            {
                await ResetScreenShotMachineApiKey(cancellationToken);
                throw new InvalidCaptureException(uri, imageArray);
            }

            return imageArray;
        }

        private bool Qualifies(byte[] imageArray)
        {
            return imageArray.Length > MissingScreenShotSizeThreshold;
        }

        private async Task ResetScreenShotMachineApiKey(CancellationToken cancellationToken)
        {
            var command = _mapper.Map<UpdateSettingsCommand>(_settings);
            command.ScreenShotMachineApiKey = null;
            await _mediator.Send(command, cancellationToken);
            await _mediator.Send(new RefreshSettingsCommand(), cancellationToken);
        }

        public void Dispose()
        {

        }
    }
}