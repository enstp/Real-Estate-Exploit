using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Flurl;
using MediatR;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using RE.Core.Business.Commands.Handlers.Jobs;
using RE.Core.Business.Commands.Requests.Emails;
using RE.Core.Business.Queries.Requests.Offers;
using RE.Core.Business.Queries.Responses.Offers;
using RE.Core.Configuration;
using RE.Core.Interfaces.Communication;
using RE.Core.Models.Communication;

namespace RE.Core.Business.Commands.Handlers.Emails
{
    public class SendNewOffersEmailCommandHandler : IRequestHandler<SendNewOffersEmailCommand>
    {
        private readonly IEmailSender _emailSender;
        private readonly IMediator _mediator;
        private readonly Configuration.Settings _settings;
        private readonly UrlSettings _urlSettings;
        private readonly ILogger<MonitorCommandHandler> _logger;

        public SendNewOffersEmailCommandHandler(
            IEmailSender emailSender,
            IMediator mediator,
            Configuration.Settings settings,
            IOptions<UrlSettings> urlSettings,
            ILogger<MonitorCommandHandler> logger)
        {
            _emailSender = emailSender;
            _mediator = mediator;
            _settings = settings;
            _urlSettings = urlSettings.Value;
            _logger = logger;
        }
        
        public async Task<Unit> Handle(SendNewOffersEmailCommand request, CancellationToken cancellationToken)
        {
            var offerCollection = await _mediator.Send(new GetSpecificOffersQuery { Ids = request.Ids }, cancellationToken);
            var offers = await offerCollection.ToListAsync(cancellationToken);

            await SendNewOffersEmail(offers, request.NotifiedEmail);
            _logger.LogInformation($"{offers.Count} offers change their prices. Email notification just sent!");

            return Unit.Value;
        }

        private async Task SendNewOffersEmail(List<OfferDto> offers, string email)
        {
            var emailMessage = new EmailMessage(new())
            {
                FromAddress = "re.webqa@gmail.com",
                FromName = "Real Estate Notifier",
                Subject = "Incoming Offers!",
                Body = BuildEmailBody(offers)
            };
            emailMessage.To.Add(email);

            await _emailSender.SendEmailAsync(emailMessage);
        }

        private string BuildEmailBody(List<OfferDto> offers)
        {
            var incomingOffers = string.Join(
                "<br />&emsp;", 
                offers.Select(o => 
                    @$"<a href=""{GetOfferUrl(o)}"">{o.Uid}</a> - 
Price: <b>{$"{o.Price:0} €"}</b>. 
<a href=""{o.Url}"">Check it now!</a>"));
            return $@"New arrived offers. Check them bellow:<br /><br />&emsp; {incomingOffers}";
        }

        public string GetOfferUrl(OfferDto offerDto)
        {
            var queryString = $"q={offerDto.Url}";
            var websiteUrl = Url.Combine(_urlSettings.ApplicationWebsiteBaseUrl, "Websites", offerDto.WebsiteId.ToString());
            return $"{websiteUrl}?{queryString}";
        }
    }
}