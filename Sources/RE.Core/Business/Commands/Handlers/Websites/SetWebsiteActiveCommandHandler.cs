using System.Threading;
using System.Threading.Tasks;
using MediatR;
using RE.Core.Business.Commands.Requests.Websites;
using RE.Core.Exceptions;
using RE.Core.Interfaces;
using RE.Domain.Entities;

namespace RE.Core.Business.Commands.Handlers.Websites
{
    public class SetWebsiteActiveCommandHandler : IRequestHandler<SetWebsiteActiveCommand>
    {
        private readonly IApplicationDbContext _context;

        public SetWebsiteActiveCommandHandler(IApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<Unit> Handle(SetWebsiteActiveCommand request, CancellationToken cancellationToken)
        {
            var entity = await _context.Websites.FindAsync(request.Id);
            if (entity is null)
            {
                throw new NotFoundException(nameof(Website), request.Id);
            }
            
            entity.Active = request.Active;

            await _context.SaveChangesAsync(cancellationToken);

            return Unit.Value;
        }
    }
}