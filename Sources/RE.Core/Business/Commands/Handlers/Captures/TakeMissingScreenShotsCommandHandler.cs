using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using RE.Core.Business.Commands.Requests.Captures;
using RE.Core.Business.Queries.Responses.Offers;
using RE.Core.Extensions;
using RE.Core.Interfaces.Repository;
using RE.Core.Interfaces.Services;
using RE.Core.Models.Inclusions;

namespace RE.Core.Business.Commands.Handlers.Captures
{
    public class TakeMissingScreenShotsCommandHandler : IRequestHandler<TakeMissingScreenShotsCommand>
    {
        private readonly IOfferRepository _offerRepo;
        private readonly IFileService _fileService;
        private readonly IMapper _mapper;
        private readonly IMediator _mediator;
        private readonly Configuration.Settings _settings;
        private readonly ILogger<TakeMissingScreenShotsCommandHandler> _logger;

        public TakeMissingScreenShotsCommandHandler(
            IOfferRepository offerRepo,
            IFileService fileService,
            IMapper mapper,
            IMediator mediator,
            Configuration.Settings settings,
            ILogger<TakeMissingScreenShotsCommandHandler> logger)
        {
            _offerRepo = offerRepo;
            _fileService = fileService;
            _mapper = mapper;
            _mediator = mediator;
            _settings = settings;
            _logger = logger;
        }

        public async Task<Unit> Handle(TakeMissingScreenShotsCommand request, CancellationToken cancellationToken)
        {
            var offers = await _offerRepo.Query(new OfferInclusions { IncludeWebsite = true, IncludeEvaluations = true }).ToListAsync(cancellationToken);
            var offerDtos = _mapper.Map<IList<OfferDto>>(offers);
            var missingOffers = offerDtos.Where(o => !_settings.GetOfferFile(o).Exists);

            foreach (var offer in missingOffers)
            {
                var offerFile = await _fileService.SaveOffer(offer, cancellationToken);
                _logger.LogInformation("Offer {offer} saved into file {file}", offer, offerFile);
            }

            return Unit.Value;
        }
    }
}