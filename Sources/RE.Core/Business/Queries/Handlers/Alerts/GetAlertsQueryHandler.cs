using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using RE.Core.Business.Base.Handlers;
using RE.Core.Business.Queries.Requests.Alerts;
using RE.Core.Business.Queries.Responses.Alerts;
using RE.Core.Interfaces.Repository;
using RE.Core.Models.Filters;

namespace RE.Core.Business.Queries.Handlers.Alerts
{
    public class GetAlertsQueryHandler : BaseHandler<GetAlertsQuery, AlertsViewModel>
    {
        private readonly IAlertRepository _alertRepo;
        private readonly IMapper _mapper;

        public GetAlertsQueryHandler(IAlertRepository alertRepo, IMapper mapper)
        {
            _alertRepo = alertRepo;
            _mapper = mapper;
        }

        public override async Task<AlertsViewModel> HandleRequest(GetAlertsQuery request, CancellationToken cancellationToken)
        {
            var alertsVm = new AlertsViewModel
            {
                Alerts = await FetchAlerts(cancellationToken),
                Websites = request.Items,
                AuthorizedAccess = request.AuthorizedAccess
            };

            return alertsVm;
        }

        private async Task<IList<AlertDto>> FetchAlerts(CancellationToken token)
        {
            var alerts = await _alertRepo.Query().ToListAsync(token);
            return _mapper.Map<IList<AlertDto>>(alerts);
        }
    }
}