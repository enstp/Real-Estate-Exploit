using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Flurl;
using HtmlAgilityPack;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using RE.Core.Configuration;
using RE.Core.Extensions;
using RE.Core.Interfaces.Services;
using RE.Core.Models.Scrapper;
using RE.Domain.Enums;

/*
 * http://www.tnt-imobiliareiasi.ro/apartamente
 */

namespace RE.TNT
{
    public class TNTScrapper : ScrapperModule
    {
        private readonly Settings _settings;
        private readonly string _baseDomain;

        public TNTScrapper(IServiceProvider serviceProvider, Settings settings, ILogger<ScrapperModule> logger, string baseUrl)
            : base(serviceProvider, baseUrl, logger)
        {
            _settings = settings;
            _baseDomain = $"{new Uri(BaseUrl).Scheme}://{new Uri(BaseUrl).Host}";
        }

        protected override QueryParameter GetSearchQueryParameter()
        {
            return new();
        }

        protected override List<Uri> GetOffersUris(QueryParameter queryParameter)
        {
            var offers = new List<string>();
            var pageNo = 1;
            var webSession = ServiceProvider.GetRequiredService<IWebSession>();

            while (offers.Count < _settings.OfferCount)
            {
                var page = pageNo++.ToString();
                var pageUrl = Url.Combine($"{BaseUrl}{queryParameter}", page);

                var doc = webSession.Load(pageUrl, RequestType.Get);

                var propertyContainers = doc.DocumentNode.Descendants("div")
                    .Where(x => x.ContainsAttributeWithValue("class", "property"))
                    .Where(x => x.Descendants("figure").First(y => y.ContainsAttributeWithValue("class", "tag status")).InnerText == "De vanzare").ToList();
                var offerLinks = propertyContainers.Select(x => x.Descendants("a").First()).ToList();
                var offerUrls = offerLinks.Select(l => l.Attributes["href"].Value).ToList();
                var pristineUrls = offerUrls.Where(u => offers.All(o => o != u));
                pristineUrls = pristineUrls.Distinct().Select(u => Url.Combine(_baseDomain, u));

                offers.AddRange(pristineUrls);
            }

            return offers.Take(_settings.OfferCount).Select(o => new Uri(o)).ToList();
        }

        protected override string RetrieveSku(Uri offerUri)
        {
            return offerUri.AbsoluteUri.Substring(offerUri.AbsoluteUri.LastIndexOf("-") + 1);
        }

        protected override DateTimeOffset? RetrievePublishDate(HtmlDocument doc)
        {
            return default;
        }

        protected override string RetrieveTitle(HtmlDocument doc)
        {
            var breadcrumbElem = doc.DocumentNode.Descendants("ol").First(x => x.ContainsAttributeWithValue("class", "breadcrumb"));
            var titleElem = breadcrumbElem.Descendants("li").First(x => x.ContainsAttributeWithValue("class", "active"));
            var title = titleElem.InnerText.Trim();
            return title;
        }

        protected override decimal RetrievePrice(HtmlDocument doc)
        {
            var priceElem = doc.DocumentNode.Descendants("span").First(x => x.ContainsAttributeWithValue("class", "tag price"));
            var priceText = priceElem.InnerText.Remove(priceElem.InnerText.IndexOf("Euro")).Replace(".", string.Empty).Trim();
            return decimal.Parse(priceText);
        }

        protected override short RetrieveRooms(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("section").First(x => x.Id == "quick-summary").Descendants("dt");
            var roomsElem = detailsNamedElements.First(x => x.InnerText.Contains("Camere:")).NextSibling.NextSibling;
            return short.Parse(roomsElem.InnerText);
        }

        protected override short? RetrieveFloor(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("section").First(x => x.Id == "quick-summary").Descendants("dt");
            var floorElem = detailsNamedElements.First(x => x.InnerText.Contains("Etaj:")).NextSibling.NextSibling;
            var floorText = floorElem.InnerText.Remove(floorElem.InnerText.IndexOf(" "));
            return floorText switch
            {
                "Parter" => 0,
                _ => floorText.Convert<short?>()
            };
        }

        protected override string RetrieveYear(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("section").First(x => x.Id == "quick-summary").Descendants("dt");
            var yearElem = detailsNamedElements.First(x => x.InnerText.Contains("An Constructie:")).NextSibling.NextSibling;
            return yearElem.InnerText;
        }

        protected override string RetrievePartitioning(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("section").First(x => x.Id == "quick-summary").Descendants("dt");
            var partitionElem = detailsNamedElements.First(x => x.InnerText.Contains("Compartimentare:")).NextSibling.NextSibling;
            return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(partitionElem.InnerText);
        }

        protected override int? RetrieveUsableArea(HtmlDocument doc)
        {
            var detailsNamedElements = doc.DocumentNode.Descendants("section").First(x => x.Id == "quick-summary").Descendants("dt");
            var usableAreaElem = detailsNamedElements.First(x => x.InnerText.Contains("Suprafață:")).NextSibling.NextSibling;
            var usableAreaText = usableAreaElem.InnerText.Replace("m2", string.Empty).Trim();
            return int.Parse(usableAreaText);
        }

        protected override int? RetrieveTotalArea(HtmlDocument doc)
        {
            return default;
        }
    }
}