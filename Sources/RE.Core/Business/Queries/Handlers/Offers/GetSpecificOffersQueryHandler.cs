using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using MediatR;
using RE.Core.Business.Queries.Requests.Offers;
using RE.Core.Business.Queries.Responses.Offers;
using RE.Core.Interfaces.Repository;
using RE.Core.Models.Inclusions;

namespace RE.Core.Business.Queries.Handlers.Offers
{
    public class GetSpecificOffersQueryHandler : IRequestHandler<GetSpecificOffersQuery, IAsyncEnumerable<OfferDto>>
    {
        private readonly IOfferRepository _offerRepo;
        private readonly IMapper _mapper;

        public GetSpecificOffersQueryHandler(IOfferRepository offerRepo, IMapper mapper)
        {
            _offerRepo = offerRepo;
            _mapper = mapper;
        }

        public Task<IAsyncEnumerable<OfferDto>> Handle(GetSpecificOffersQuery request, CancellationToken cancellationToken)
        {
            var inclusions = new OfferInclusions {IncludeEvaluations = true};
            var offers = _offerRepo.Query(request.Ids, inclusions)
                .ProjectTo<OfferDto>(_mapper.ConfigurationProvider)
                .ToAsyncEnumerable();

            return Task.FromResult(offers);
        }
    }
}