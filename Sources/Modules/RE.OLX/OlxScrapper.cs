using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using HtmlAgilityPack;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using RE.Core.Configuration;
using RE.Core.Extensions;
using RE.Core.Interfaces.Services;
using RE.Core.Models.Scrapper;
using RE.Domain.Enums;

/*
 * https://www.olx.ro/imobiliare/apartamente-garsoniere-de-vanzare/iasi_39939
 */

namespace RE.OLX
{
    public class OlxScrapper : ScrapperModule
    {
        private readonly Settings _settings;
        private readonly string _baseDomain;

        public OlxScrapper(IServiceProvider serviceProvider, Settings settings, ILogger<ScrapperModule> logger, string baseUrl)
            : base(serviceProvider, baseUrl, logger)
        {
            _settings = settings;
            _baseDomain = $"{new Uri(BaseUrl).Scheme}://{new Uri(BaseUrl).Host}";
        }

        protected override QueryParameter GetSearchQueryParameter()
        {
            return new()
            {
                ["search[private_business]"] = "private",
                ["search[order]"] = "created_at:desc"
            };
        }

        protected override List<Uri> GetOffersUris(QueryParameter queryParameter)
        {
            var offers = new List<string>();
            var pageNo = 1;
            var webSession = ServiceProvider.GetRequiredService<IWebSession>();

            while (offers.Count < _settings.OfferCount)
            {
                if (pageNo > 1) queryParameter["page"] = pageNo.ToString();
                ++pageNo;
                var pageUrl = $"{BaseUrl}{queryParameter}";
                var doc = webSession.Load(pageUrl, RequestType.Get);

                var offerTable = doc.DocumentNode.SelectSingleNode("//table[@id='offers_table']");
                var offerTds = offerTable.SelectNodes(".//td[contains(@class, 'offer')]").ToList();
                var selledOffers = offerTds.Where(c => c.SelectSingleNode(".//p[@class='price']/strong").InnerText != "Schimb").ToList();
                var offerLinks = selledOffers.Select(o => o.SelectSingleNode(".//a[contains(@class, 'detailsLink')]")).ToList();
                var offerUrls = offerLinks.Select(l => l.Attributes["href"].Value).Where(u => u.StartsWith(_baseDomain)).ToList();
                var pristineUrls = offerUrls.Distinct().Where(u => offers.All(o => o != u)).ToList();

                offers.AddRange(pristineUrls);
            }

            return offers.Take(_settings.OfferCount).Select(o => new Uri(o)).ToList();
        }

        protected override string RetrieveSku(Uri offerUri)
        {
            return offerUri.AbsoluteUri.Remove(offerUri.AbsoluteUri.IndexOf(".html")).Substring(offerUri.AbsoluteUri.LastIndexOf("-") + 1);
        }

        protected override DateTimeOffset? RetrievePublishDate(HtmlDocument doc)
        {
            var timeStampLabel = doc.DocumentNode.Descendants("span").First(x => x.ContainsAttributeWithValue("data-cy", "ad-posted-at"));
            var rawTimeStamp = timeStampLabel.InnerText.ToLower().Replace("postat", string.Empty).Replace("la", string.Empty).Trim();
            var timeStamp = rawTimeStamp.Contains("azi")
                ? DateTimeOffset.ParseExact(rawTimeStamp.Replace("azi", string.Empty).Trim(), "HH:mm", new CultureInfo("ro-RO"))
                : DateTimeOffset.ParseExact(rawTimeStamp, "d MMMM yyyy", new CultureInfo("ro-RO"));
            return timeStamp;
        }

        protected override string RetrieveTitle(HtmlDocument doc)
        {
            var titleElem = doc.DocumentNode.Descendants("h1").First(x => x.ContainsAttributeWithValue("data-cy", "ad_title"));
            var title = titleElem.InnerText.Trim();
            return title;
        }

        protected override decimal RetrievePrice(HtmlDocument doc)
        {
            var priceContainer = doc.DocumentNode.Descendants("div").First(x => x.ContainsAttributeWithValue("data-testid", "ad-price-container"));
            var priceLabel = priceContainer.Descendants("h3").First();
            var priceText = priceLabel.InnerText;
            priceText = priceText.RemoveWhiteSpaces().Replace("€", string.Empty).Replace("lei", string.Empty);
            return decimal.Parse(priceText);
        }

        protected override short RetrieveRooms(HtmlDocument doc)
        {
            var breadcrumb = doc.DocumentNode.Descendants("ol").First(x => x.ContainsAttributeWithValue("data-cy", "categories-breadcrumbs"));
            var roomsNoElem = breadcrumb.Descendants("a").Last();
            var roomsNoStr = roomsNoElem.InnerText.Remove(roomsNoElem.InnerText.IndexOf(" "));
            return short.Parse(roomsNoStr);
        }

        protected override short? RetrieveFloor(HtmlDocument doc)
        {
            var baxterDiv = doc.DocumentNode.Descendants("div").First(x => x.Id == "baxter-above-parameters");
            var detailsDescElements = baxterDiv.NextSibling.NextSibling.Descendants("p");
            var floorElem = detailsDescElements.FirstOrDefault(e => e.InnerText.Contains("Etaj:"));
            var rawFloor = floorElem?.InnerText.Replace("Etaj:", string.Empty).Trim();
            var specialFloors = new List<string> { "Mansarda" };
            return rawFloor switch
            {
                var f when specialFloors.Contains(f) => (short?)null,
                "Parter" => 0,
                "Demisol" => -1,
                "10 si peste" => 10,
                _ => rawFloor.Convert<short?>()
            };
        }

        protected override string RetrieveYear(HtmlDocument doc)
        {
            var baxterDiv = doc.DocumentNode.Descendants("div").First(x => x.Id == "baxter-above-parameters");
            var detailsDescElements = baxterDiv.NextSibling.NextSibling.Descendants("p");
            var yearElem = detailsDescElements.FirstOrDefault(e => e.InnerText.Contains("An constructie:"));
            var yearText = yearElem?.InnerText.Replace("An constructie:", string.Empty).Trim();
            return yearText;
        }

        protected override string RetrievePartitioning(HtmlDocument doc)
        {
            var baxterDiv = doc.DocumentNode.Descendants("div").First(x => x.Id == "baxter-above-parameters");
            var detailsDescElements = baxterDiv.NextSibling.NextSibling.Descendants("p");
            var partitioningElem = detailsDescElements.FirstOrDefault(e => e.InnerText.Contains("Compartimentare:"));
            var partitioningText = partitioningElem?.InnerText.Replace("Compartimentare:", string.Empty).Trim();
            return partitioningText;
        }

        protected override int? RetrieveUsableArea(HtmlDocument doc)
        {
            var baxterDiv = doc.DocumentNode.Descendants("div").First(x => x.Id == "baxter-above-parameters");
            var detailsDescElements = baxterDiv.NextSibling.NextSibling.Descendants("p");
            var usableAreaElem = detailsDescElements.FirstOrDefault(e => e.InnerText.Contains("Suprafata utila:"));
            var usableAreaText = usableAreaElem?.InnerText.Replace("Suprafata utila:", string.Empty).Trim();
            var usableArea = usableAreaText?.Replace("m²", String.Empty).RemoveWhiteSpaces().Trim();
            return usableArea.Convert<int?>();
        }

        protected override int? RetrieveTotalArea(HtmlDocument doc)
        {
            return default;
        }
    }
}