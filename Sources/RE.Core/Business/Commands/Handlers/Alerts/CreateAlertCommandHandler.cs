using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using MediatR;
using RE.Core.Business.Commands.Requests.Alerts;
using RE.Core.Extensions;
using RE.Core.Interfaces.Repository;
using RE.Domain.Constants;
using RE.Domain.Entities;

namespace RE.Core.Business.Commands.Handlers.Alerts
{
    public class CreateAlertCommandHandler : IRequestHandler<CreateAlertCommand>
    {
        private readonly IAlertRepository _alertRepo;

        public CreateAlertCommandHandler(IAlertRepository alertRepo)
        {
            _alertRepo = alertRepo;
        }

        public async Task<Unit> Handle(CreateAlertCommand request, CancellationToken cancellationToken)
        {
            var entity = new Alert();
            entity.Email = request.Email;
            entity.Rooms = request.RoomTypes.Select(r => (int)r).JoinBy(Delimiters.Semicolon);
            entity.Floors = request.FloorTypes.Select(f => (int)f).JoinBy(Delimiters.Semicolon);
            entity.Partitioning = request.PartitionTypes.Select(p => (int)p).JoinBy(Delimiters.Semicolon);
            entity.IncommingOffers = request.IncommingOffers;
            entity.ReevaluatedOffers = request.ReevaluatedOffers;

            await _alertRepo.Add(entity, cancellationToken);

            return Unit.Value;
        }
    }
}