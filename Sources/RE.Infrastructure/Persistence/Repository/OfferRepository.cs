using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using RE.Core.Extensions;
using RE.Core.Interfaces;
using RE.Core.Interfaces.Repository;
using RE.Core.Models.Inclusions;
using RE.Domain.Entities;

namespace RE.Infrastructure.Persistence.Repository
{
    public class OfferRepository : BaseRepository<Offer, IApplicationDbContext>, IOfferRepository
    {
        public OfferRepository(IApplicationDbContext context) : base(context) { }

        public async Task<Offer> Get(int id, OfferInclusions inclusions, CancellationToken cancellation = default)
        {
            return await ComputeQuery(inclusions).FirstAsync(v => v.Id == id, cancellation);
        }

        public IQueryable<Offer> Query(OfferInclusions inclusions)
        {
            return ComputeQuery(inclusions);
        }

        public IQueryable<Offer> Query(IList<int> ids, OfferInclusions inclusions)
        {
            return ComputeQuery(inclusions).Where(v => ids.Contains(v.Id));
        }

        public async Task<Offer> Get(Expression<Func<Offer, bool>> predicate, OfferInclusions inclusions, CancellationToken cancellation = default)
        {
            return await ComputeQuery(inclusions).FirstOrDefaultAsync(predicate, cancellation);
        }

        public IQueryable<Offer> QueryForWebsite(int websiteId, OfferInclusions inclusions)
        {
            return ComputeQuery(inclusions).Where(o => o.WebsiteId == websiteId);
        }

        private IQueryable<Offer> ComputeQuery(OfferInclusions inclusions)
        {
            var offerQry = Context.Offers
                .If(inclusions.IncludeWebsite, q => q.Include(e => e.Website))
                .If(inclusions.IncludeEvaluations, q => q.Include(e => e.Evaluations)
                    .If(inclusions.IncludeEvaluationOffers, qq => qq.ThenInclude(e => e.Offer)));

            return offerQry;
        }
    }
}