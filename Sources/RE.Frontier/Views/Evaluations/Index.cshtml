@using RE.Core.Business.Queries.Responses.Offers
@using RE.Domain.Enums
@model OfferSummary

@{ Layout = null; }

<div class="row">
    <div class="col-md-12">

        <form>
            <div class="form-group">
                <a href="@Model.Offer.Url" target="_blank">
                    @Model.Offer.Url
                </a>
            </div>

            <table class="table evaluations-table">
                <thead class="thead-light">
                    <tr>
                        @if (Model.Evaluations.Count > 1)
                        {
                            <th width="60"></th>
                        }
                        <th>
                            @Html.DisplayNameFor(model => model.Evaluations[0].Amount)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Evaluations[0].AvailableFrom)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Evaluations[0].FriendlyAvailableFrom)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Evaluations[0].CaptureLink)
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Evaluations.OrderByDescending(e => e.AvailableFrom))
                {
                    <tr>
                        @if (Model.Evaluations.Count > 1)
                        {
                        <td>
                            @(Html.Raw(item.Fluctuation == Trend.Linear ? string.Empty :
                                    item.Fluctuation == Trend.Ascending
                                        ? "<i class='fas fa-sort-amount-up text-danger fa-2x'></i>"
                                        : "<i class='fas fa-sort-amount-down text-success fa-2x'></i>"))
                        </td>
                        }
                        <td>
                            @Html.DisplayFor(modelItem => item.Amount)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.AvailableFrom)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FriendlyAvailableFrom)
                        </td>
                        <td>
                            <a href="@item.CaptureLink" target="_blank" data-toggle="tooltip"
                               data-placement="top" title="@(item.CaptureLink == null ? "No capture is available" : "View captured offer")">
                                <i class="fas fa-camera @(item.CaptureLink == null ? "text-black-50" : "")"></i>
                            </a>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </form>
    </div>

    <div class="col-md-12">
        <button type="button" class="btn btn-link text-decoration-none"
                data-toggle="collapse" data-target="#variations-panel">
            <i class="fas fa-angle-double-down"></i> Price evolution
        </button>

        <div id="variations-panel" class="collapse card mt-4">
            <div class="card-body">
                <div id="evaluations-chart">
                    <!-- Injected chart -->
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var evaluationsChartSelector = '#evaluations-chart';
    var evaluationsPanelSelector = '[data-target="#variations-panel"]';

    $(function() {
        $('[data-toggle="tooltip"]').tooltip();

        $(evaluationsPanelSelector).click(function() {
            $(this).find('i').toggleClass('fa-angle-double-down fa-angle-double-up');
        });

        var dataSeries = [];
        @foreach (var dayPrice in Model.Evolution)
        {
            @:var day = '@dayPrice.Day.ToString("s")';
            @:var value = @dayPrice.Price;
            @:dataSeries.push([moment(day).valueOf(), value]);
        }

        var options = {
            series: [
                {
                    name: 'Price',
                    data: dataSeries
                }
            ],
            chart: {
                type: 'area',
                stacked: false,
                height: 350,
                zoom: {
                    type: 'x',
                    enabled: true,
                    autoScaleYaxis: true
                },
                toolbar: {
                    autoSelected: 'zoom',
                    tools: {
                        download: false,
                        selection: true,
                        zoom: true,
                        zoomin: true,
                        zoomout: true,
                        pan: true
                    }
                }
            },
            dataLabels: {
                enabled: false
            },
            markers: {
                size: 0
            },
            fill: {
                type: 'gradient',
                gradient: {
                    shadeIntensity: 1,
                    inverseColors: false,
                    opacityFrom: 0.5,
                    opacityTo: 0,
                    stops: [0, 90, 100]
                }
            },
            xaxis: {
                type: 'datetime'
            },
            tooltip: {
                shared: false,
                y: {
                    formatter: function(val) {
                        return `${val.toFixed(0)}€`;
                    }
                }
            }
        };

        var chart = new ApexCharts(document.querySelector(evaluationsChartSelector), options);
        chart.render();
    });
</script>
