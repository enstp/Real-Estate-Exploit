using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using RandomNameGeneratorLibrary;
using RE.Core.Configuration;
using RE.Core.Extensions;
using RE.Core.Interfaces;
using RE.Core.Interfaces.Communication;
using RE.Core.Interfaces.Services;
using RE.Domain.Entities.Base;
using RE.Infrastructure.Communication;
using RE.Infrastructure.HttpClients;
using RE.Infrastructure.Persistence;
using RE.Infrastructure.Services;

namespace RE.Infrastructure
{
    public static class ServiceCollectionExtensions
    {
        public static IServiceCollection AddInfrastructure(this IServiceCollection services, IConfiguration configuration)
        {
            services.AddStore(configuration);
            services.AddRepositories();
            services.AddServices(configuration);
            services.AddHttpClients(configuration);
            return services;
        }

        private static void AddStore(this IServiceCollection services, IConfiguration configuration)
        {
            var currentAssembly = Assembly.GetExecutingAssembly();
            var connectionString = configuration.GetConnectionString("DefaultConnection");

            Action<DbContextOptionsBuilder> builder = options =>
            {
                options.UseSqlServer(
                    connectionString,
                    sqlOptions => sqlOptions
                        .MigrationsAssembly(currentAssembly.FullName)
                        .EnableRetryOnFailure(
                            maxRetryCount: 5,
                            maxRetryDelay: TimeSpan.FromSeconds(30),
                            errorNumbersToAdd: new List<int>()));
            };
            services.AddDbContext<ApplicationDbContext>(options => builder(options));
            services.AddDbContextFactory<ApplicationDbContext>(options => builder(options), ServiceLifetime.Scoped);
            services.AddScoped<IApplicationDbContext, ApplicationDbContext>(provider => provider.GetService<ApplicationDbContext>());
        }

        private static void AddRepositories(this IServiceCollection services)
        {
            var repositoryTypes = Assembly.GetExecutingAssembly().GetImplementorTypes(typeof(Core.Interfaces.Repository.IRepository<>));
            foreach (var repositoryType in repositoryTypes)
            {
                services.RegisterRepositories(repositoryType);
                services.RegisterGenericRepositories(repositoryType);
            }
        }

        private static void RegisterRepositories(this IServiceCollection services, Type repositoryTpe)
        {
            var iRepositoryTpe = repositoryTpe.GetNonGenericInterfaces().First();
            services.AddScoped(iRepositoryTpe, repositoryTpe);
        }

        private static void RegisterGenericRepositories(this IServiceCollection services, Type repositoryTpe)
        {
            var stateEntityType = repositoryTpe
                .GetInterfacesWithAssignableParameter(typeof(Entity<>)).Last()
                .GenericTypeArguments.First();

            var iRepositoryTpe = typeof(Core.Interfaces.Repository.IRepository<>).MakeGenericType(stateEntityType);
            services.AddScoped(iRepositoryTpe, repositoryTpe);
        }

        private static void AddServices(this IServiceCollection services, IConfiguration configuration)
        {
            services.AddTransient<IDateTimeService, DateTimeService>();
            services.AddTransient<IWebSession, WebSession>();
            services.AddScoped<IScrapperService, ScrapperService>();
            services.AddScoped<IModuleService, ModuleService>();
            services.AddScoped<IOfferSyncronizer, OfferSyncronizer>();
            services.AddScoped<IFileService, FileService>();
            services.AddTransient<IWebShotAccessBuilder, WebShotAccessBuilder>();
            services.AddSingleton<IPersonNameGenerator, PersonNameGenerator>();
            services.AddSingleton<IEmailGenerator, EmailGenerator>();
            services.AddScoped<ICaptchaSolver, CaptchaSolver>();
            services.AddScoped<IAuthService, AuthService>();
            services.AddScoped<IOfferFilter, OfferFilter>();

            var chromeDriverDirectory = configuration.GetValue<string>("ChromeDriverDirectory");
            services.AddScoped<IWebDriver>(opt =>
            {
                var options = new ChromeOptions();
                options.AddArguments("window-size=1024,960");
                options.AddArguments("--headless");
                return new ChromeDriver(chromeDriverDirectory, options);
            });

            var useScreenShotMachineApi = configuration.GetValue<bool>("UseScreenShotMachineApi");
            if(useScreenShotMachineApi) services.AddScoped<IWebshotService, ScreenShotMachineService>();
            else services.AddScoped<IWebshotService, WebDriverScreenShotService>();

            services.AddTransient<IEmailSender, EmailSender>();
            var sendGridSettings = configuration.GetSection("SendGrid").Get<SendGridSettings>();
            //services.AddSingleton<IEmailProvider, MailKitSettings>();
            services.AddSingleton<IEmailProvider, SendGridProvider>(opt => new SendGridProvider(sendGridSettings.ApiKey));
        }

        private static void AddHttpClients(this IServiceCollection services, IConfiguration configuration)
        {
            var screenShotMachineSettings = configuration.GetSection("ScreenShotMachine").Get<ScreenShotMachineSettings>();
            services.AddHttpClient<WebShotClient>(opt => opt.BaseAddress = screenShotMachineSettings.Endpoint);
        }
    }
}
