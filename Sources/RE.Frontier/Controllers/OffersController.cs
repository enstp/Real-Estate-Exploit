using System.Threading.Tasks;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using RE.Core.Business.Commands.Requests.Offers;
using RE.Core.Business.Queries.Requests.Offers;
using RE.Core.Business.Queries.Responses.Offers;
using RE.Domain.Constants;
using RE.Frontier.Controllers.Base;
using RE.Frontier.Infrastructure.Filters;

namespace RE.Frontier.Controllers
{
    public class OffersController : MvcController
    {
        private readonly IMapper _mapper;

        public OffersController(IMapper mapper)
        {
            _mapper = mapper;
        }

        [ManualTransactionFilter]
        public async Task<IActionResult> Details(int id)
        {
            var offer = await Mediator.Send(new GetOfferQuery { Id = id });
            return View(offer);
        }

        [Authorize(Policy = Policies.AuthorizedUser)]
        [ManualTransactionFilter]
        public async Task<IActionResult> Edit(int id)
        {
            var offer = await Mediator.Send(new GetOfferQuery { Id = id });
            return View(offer);
        }

        [ValidateAntiForgeryToken]
        [Authorize(Policy = Policies.AuthorizedUser)]
        public async Task<IActionResult> Update(int id, UpdateOfferCommand command)
        {
            if (ModelState.IsValid)
            {
                await Mediator.Send(command);
                return Json(new { Success = true });
            }

            return View("Edit", _mapper.Map<OfferDto>(command));
        }

        [Authorize(Policy = Policies.AuthorizedUser)]
        public async Task<IActionResult> Delete(int id)
        {
            await Mediator.Send(new DeleteOfferCommand { Id = id });
            return Json(new { Success = true });
        }
    }
}
