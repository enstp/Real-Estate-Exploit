using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using MediatR;
using RE.Core.Business.Queries.Requests.Evaluations;
using RE.Core.Business.Queries.Responses.Offers;
using RE.Core.Interfaces.Repository;
using RE.Core.Models.Inclusions;

namespace RE.Core.Business.Queries.Handlers.Evaluations
{
    public class GetEvaluationsQueryHandler : IRequestHandler<GetEvaluationsQuery, OfferSummary>
    {
        private readonly IOfferRepository _offerRepo;
        private readonly IMapper _mapper;

        public GetEvaluationsQueryHandler(IOfferRepository offerRepo, IMapper mapper)
        {
            _offerRepo = offerRepo;
            _mapper = mapper;
        }

        public async Task<OfferSummary> Handle(GetEvaluationsQuery request, CancellationToken cancellationToken)
        {
            var inclusions = new OfferInclusions { IncludeWebsite = true, IncludeEvaluations = true, IncludeEvaluationOffers = true };
            var offer = await _offerRepo.Get(request.OfferId, inclusions, cancellationToken);

            return _mapper.Map<OfferSummary>(offer);
        }
    }
}