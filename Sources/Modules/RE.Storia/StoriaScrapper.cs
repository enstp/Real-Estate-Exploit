using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using HtmlAgilityPack;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;
using RE.Core.Configuration;
using RE.Core.Extensions;
using RE.Core.Interfaces.Services;
using RE.Core.Models.Scrapper;
using RE.Domain.Enums;

/*
 * https://www.olx.ro/imobiliare/apartamente-garsoniere-de-vanzare/iasi_39939
 */

namespace RE.Storia
{
    public class StoriaScrapper : ScrapperModule
    {
        private readonly Settings _settings;

        public StoriaScrapper(IServiceProvider serviceProvider, Settings settings, ILogger<ScrapperModule> logger, string baseUrl)
            : base(serviceProvider, baseUrl, logger)
        {
            _settings = settings;
        }

        protected override QueryParameter GetSearchQueryParameter()
        {
            return new()
            {
                // ["search[private_business]"] = "private", // Removed for brevity
                ["search[order]"] = "created_at:desc"
            };
        }

        protected override List<Uri> GetOffersUris(QueryParameter queryParameter)
        {
            var offers = new List<string>();
            var pageNo = 1;
            var webSession = ServiceProvider.GetRequiredService<IWebSession>();

            while (offers.Count < _settings.OfferCount)
            {
                if (pageNo > 1) queryParameter["page"] = pageNo.ToString();
                ++pageNo;
                var pageUrl = $"{BaseUrl}{queryParameter}";
                var doc = webSession.Load(pageUrl, RequestType.Get);

                var offerContainer = doc.DocumentNode.SelectSingleNode("//section[@id='body-container']");
                var offerItems = offerContainer.SelectNodes(".//article[contains(@class, 'offer-item')]").ToList();
                var offerUrls = offerItems.Select(o => o.Attributes["data-url"].Value).ToList();
                var pristineUrls = offerUrls.Distinct().Where(u => offers.All(o => o != u)).ToList();

                offers.AddRange(pristineUrls);
            }

            return offers.Take(_settings.OfferCount).Select(o => new Uri(o)).ToList();
        }

        protected override string RetrieveSku(Uri offerUri)
        {
            return offerUri.AbsoluteUri.Remove(offerUri.AbsoluteUri.IndexOf(".html")).Substring(offerUri.AbsoluteUri.LastIndexOf("-") + 1);
        }

        protected override DateTimeOffset? RetrievePublishDate(HtmlDocument doc)
        {
            var dataElem = doc.DocumentNode.Descendants("script").First(x => x.ContainsAttributeWithValue("id", "__NEXT_DATA__"));
            var jsonData = dataElem.InnerText.ParseJson();
            var adJsonObj = jsonData["props"]["pageProps"]["ad"];
            var rawTimeStamp = adJsonObj["dateCreated"].Value<string>();

            var timeStamp = DateTimeOffset.ParseExact(rawTimeStamp, "yyyy-MM-dd HH:mm:ss", new CultureInfo("ro-RO"));
            return timeStamp;
        }

        protected override string RetrieveTitle(HtmlDocument doc)
        {
            var titleElem = doc.DocumentNode.Descendants("h1").First(x => x.ContainsAttributeWithValue("data-cy", "adPageAdTitle"));
            var title = titleElem.InnerText.Trim();
            return title;
        }

        protected override decimal RetrievePrice(HtmlDocument doc)
        {
            var priceElem = doc.DocumentNode.Descendants("strong").First(x => x.ContainsAttributeWithValue("data-cy", "adPageHeaderPrice"));
            var priceText = priceElem.InnerText.RemoveWhiteSpaces().Replace("€", string.Empty).Replace("lei", string.Empty).Replace("RON", string.Empty);
            return decimal.Parse(priceText);
        }

        protected override short RetrieveRooms(HtmlDocument doc)
        {
            var dataElem = doc.DocumentNode.Descendants("script").First(x => x.ContainsAttributeWithValue("id", "__NEXT_DATA__"));
            var jsonData = dataElem.InnerText.ParseJson();
            var adJsonObj = jsonData["props"]["pageProps"]["ad"];
            var targetJsonObj = adJsonObj["target"];
            var rawRoomsNo = targetJsonObj["Rooms_num"][0].Value<string>();
            return short.Parse(rawRoomsNo);
        }

        protected override short? RetrieveFloor(HtmlDocument doc)
        {
            var dataElem = doc.DocumentNode.Descendants("script").First(x => x.ContainsAttributeWithValue("id", "__NEXT_DATA__"));
            var jsonData = dataElem.InnerText.ParseJson();
            var adJsonObj = jsonData["props"]["pageProps"]["ad"];
            var characteristicsJsonObj = adJsonObj["characteristics"];
            var floorCharacteristicJsonObj = characteristicsJsonObj.FirstOrDefault(x => x["label"].Value<string>() == "Etaj");
            var rawFloor = floorCharacteristicJsonObj?["localizedValue"].Value<string>().ToLower();
            var specialFloors = new List<string> { "mansarda" };
            return rawFloor switch
            {
                var f when specialFloors.Contains(f) => (short?)null,
                "parter" => 0,
                "demisol" => -1,
                _ => rawFloor.Convert<short?>()
            };
        }

        protected override string RetrieveYear(HtmlDocument doc)
        {
            var dataElem = doc.DocumentNode.Descendants("script").First(x => x.ContainsAttributeWithValue("id", "__NEXT_DATA__"));
            var jsonData = dataElem.InnerText.ParseJson();
            var adJsonObj = jsonData["props"]["pageProps"]["ad"];
            var targetJsonObj = adJsonObj["target"];
            var rawYear = targetJsonObj["Construction_year"]?.Value<string>();
            return rawYear;
        }

        protected override string RetrievePartitioning(HtmlDocument doc)
        {
            var dataElem = doc.DocumentNode.Descendants("script").First(x => x.ContainsAttributeWithValue("id", "__NEXT_DATA__"));
            var jsonData = dataElem.InnerText.ParseJson();
            var adJsonObj = jsonData["props"]["pageProps"]["ad"];
            var characteristicsJsonObj = adJsonObj["characteristics"];
            var partitioningCharacteristicJsonObj = characteristicsJsonObj.FirstOrDefault(x => x["label"].Value<string>() == "Compartimentare");
            var rawPartitioning = partitioningCharacteristicJsonObj?["localizedValue"].Value<string>();
            return rawPartitioning?.ToTitleCase();
        }

        protected override int? RetrieveUsableArea(HtmlDocument doc)
        {
            var dataElem = doc.DocumentNode.Descendants("script").First(x => x.ContainsAttributeWithValue("id", "__NEXT_DATA__"));
            var jsonData = dataElem.InnerText.ParseJson();
            var adJsonObj = jsonData["props"]["pageProps"]["ad"];
            var characteristicsJsonObj = adJsonObj["characteristics"];
            var usableAreaCharacteristicJsonObj = characteristicsJsonObj.First(x => x["label"].Value<string>() == "Suprafata utila (m²)");
            var rawUsableArea = usableAreaCharacteristicJsonObj["localizedValue"].Value<string>();
            var usableArea = rawUsableArea.Replace("m²", string.Empty).Replace("m2", string.Empty).Replace(",", ".").Convert<double>();
            return Convert.ToInt32(usableArea);
        }

        protected override int? RetrieveTotalArea(HtmlDocument doc)
        {
            var dataElem = doc.DocumentNode.Descendants("script").First(x => x.ContainsAttributeWithValue("id", "__NEXT_DATA__"));
            var jsonData = dataElem.InnerText.ParseJson();
            var adJsonObj = jsonData["props"]["pageProps"]["ad"];
            var characteristicsJsonObj = adJsonObj["characteristics"];
            var totalAreaCharacteristicJsonObj = characteristicsJsonObj.First(x => x["label"].Value<string>() == "Suprafata construita (m²)");
            var rawTotalArea = totalAreaCharacteristicJsonObj["localizedValue"].Value<string>();
            var totalArea = rawTotalArea.Replace("m²", string.Empty).Replace("m2", string.Empty).Replace(",", ".").Convert<double>();
            return Convert.ToInt32(totalArea);
        }
    }
}