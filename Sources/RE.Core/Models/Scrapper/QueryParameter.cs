using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using RE.Core.Extensions;

namespace RE.Core.Models.Scrapper
{
    public class QueryParameter
    {
        private List<KeyValuePair<string, string>> parameters = new List<KeyValuePair<string, string>>();

        public string this[string parametterKey]
        {
            get => parameters.FirstOrDefault(par => par.Key.Equals(parametterKey)).Value;
            set
            {
                var p = parameters.Where(par => par.Key.Equals(parametterKey));
                if (p.Any())
                {
                    var paramInd = parameters.IndexOf(p.FirstOrDefault());
                    parameters[paramInd] = new KeyValuePair<string, string>(parametterKey, value);
                }
                else
                {
                    parameters.Add(new KeyValuePair<string, string>(parametterKey, value));
                }
            }
        }

        public QueryParameter Clone()
        {
            var clone = Activator.CreateInstance<QueryParameter>();
            clone.parameters = new List<KeyValuePair<string, string>>(parameters);
            return clone;
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            if (parameters.Any())
            {
                foreach (var pair in parameters)
                {
                    var parKey = $"&{pair.Key.UrlEncode()}={pair.Value.UrlEncode()}";
                    sb.Append(parKey);
                }

                sb[0] = '?';
            }

            return sb.ToString();
        }
    }
}